<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>网页模板 pug 基本语法</title>
    <url>/hexo-pug-notes.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>pug 原名 <code>jade</code> ，因版权问题更名为 <code>pug</code> ，即哈巴狗。与 hexo 默认模块 <code>ejs</code> 一样，pug 也是一个模板引擎，可用于快速的网站开发，当然也可以用于静态博客网站的设计。本站点现时所用主题 manupassant 也使用了 <code>pug</code> 。</p>
<p>本文针对 Hexo 中使用 <code>pug</code> 的情况为例，说明其基本语法。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># common install</span></span><br><span class="line">npm install pug</span><br><span class="line"></span><br><span class="line"><span class="comment"># install for hexo blog</span></span><br><span class="line">npm install hexo-renderer-pug --save</span><br></pre></td></tr></table></figure>

<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>pug 不同于 html ，前者不需要标签的开和闭，如 html 的 <code>&lt;p&gt;Demo&lt;/p&gt;</code> ，在 pug 使用 <code>p Demo</code> 即可。</p>
<h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><p>pug 对空格敏感，有点类似 python 对制表符tab敏感。pug 使用空格作为缩进符，当然用 <code>soft tab</code> 也可行。同一级标签需保证左对齐。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div</span><br><span class="line">    p Hello, world!</span><br><span class="line">    p Hello, pug.</span><br></pre></td></tr></table></figure>

<p>渲染结果如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hellow, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, pug.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>pug 使用 <code>//-</code> 或 <code>//</code> 对代码进行注释，前者注释内容不出现在渲染后的 html 文件中，后者反之。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- html中不包含此行</span><br><span class="line">// html中会包含此行</span><br></pre></td></tr></table></figure>

<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>pug 将标签属性存放于括号 <code>()</code> 内，多个属性之间以 <code>逗号</code> 或 <code>空格</code> 分隔。此外，对于标签的 <code>id</code> 和 <code>class</code> ，pug 使用 <code>#</code> 紧跟标签 <code>id</code> ,使用 <code>.</code> 紧跟标签 <code>class</code> ，可以同时设置多个 <code>class</code> 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h1#title Test title</span><br><span class="line">img#name.class1.class2(src=&quot;/test.png&quot; alt=&quot;test&quot;)</span><br></pre></td></tr></table></figure>

<p>渲染结果如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Test title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">class</span>=<span class="string">&quot;class1 class2&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/test.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h2><p>为了方便代码复用，pug 提供了 <code>include</code> 包含功能，以下代码会将 <code>_partial</code> 目录下的 <code>head.pug</code> 文件内容包含到当前调用的位置。有点 C&#x2F;C++ 中内联函数的意思。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html(lang=&#x27;en&#x27;)</span><br><span class="line">    include _partial/head.pug</span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>下面是一个简单的 <code>base</code> 模板，通过 <code>block</code> 定义了页面头部 <code>head</code> 和内容 <code>body</code> 。块 <code>block</code> 有点类似 C&#x2F;C++ 的抽象函数，需要在继承者中完成定义，填充具体内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- base.pug</span><br><span class="line">html</span><br><span class="line">    head</span><br><span class="line">        block title</span><br><span class="line">    body</span><br><span class="line">        block content</span><br></pre></td></tr></table></figure>

<p>以下文件使用 <code>extends</code> 继承以上模板，通过 <code>block</code> 覆盖或替换原有块 <code>block</code> 。当然，继承者也可以在原有基础上继续扩展。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- index.pug</span><br><span class="line">extends base.pug</span><br><span class="line"></span><br><span class="line">block title</span><br><span class="line">    title &quot;Test title&quot;</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">    h1 Hello world!</span><br><span class="line">    block article</span><br></pre></td></tr></table></figure>

<h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><p>pug中通过 <code>- var name = value</code> 的形式定义变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- var intData = 100</span><br><span class="line">- var boolData = false</span><br><span class="line">- var stringData = &#x27;Test&#x27;</span><br><span class="line">p.int= intData</span><br><span class="line">p.bool= boolData</span><br><span class="line">p.stringData= stringData</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需注意的是，在引用变量时，需要在引用位置加上&#x3D;号，否则会默认将变量名当成普通字符串使用。</p>
</blockquote>
<p>如果想要将变量与其它字符串常量或是变量连接在一起，就不能用等号了，而是应该用 <code>#&#123;&#125;</code> ，该符号会对大括号内的变量进行求值和转义，最终得到渲染输出的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- var girl = &#x27;Lily&#x27;</span><br><span class="line">- var boy = &#x27;Jack&#x27;</span><br><span class="line">p #&#123;girl&#125; is so beautiful!</span><br><span class="line">p And #&#123;boy&#125; is handsome.</span><br></pre></td></tr></table></figure>

<h2 id="条件结构"><a href="#条件结构" class="headerlink" title="条件结构"></a>条件结构</h2><p>pug 的条件语句与其它语言类似，均是如下这般：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- var A = &#123;value: &#x27;Test&#x27;&#125;</span><br><span class="line">- var B = true</span><br><span class="line">if A.value</span><br><span class="line">    p= A.value</span><br><span class="line">else if B</span><br><span class="line">    p= B</span><br><span class="line">else</span><br><span class="line">    p nothing</span><br></pre></td></tr></table></figure>

<h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>pug 中使用 <code>each</code> 和 <code>while</code> 实现循环迭代，<code>each</code> 可以返回当前所在项的索引值，默认从 <code>0</code> 开始计数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- each</span><br><span class="line">ol</span><br><span class="line">    each item in [&#x27;Sun&#x27;, &#x27;Mon&#x27;, &#x27;Tus&#x27;, &#x27;Wen&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;]</span><br><span class="line">        li= item</span><br><span class="line"></span><br><span class="line">//- get index of each</span><br><span class="line">- var week = [&#x27;Sun&#x27;, &#x27;Mon&#x27;, &#x27;Tus&#x27;, &#x27;Wen&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;]</span><br><span class="line">ol</span><br><span class="line">    each item, index in week</span><br><span class="line">        li= index + &#x27;:&#x27; + item</span><br></pre></td></tr></table></figure>
<p>渲染成 html 后：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Sun<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Mon<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tus<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Wen<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Thu<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Fri<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Sat<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>0:Sun<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1:Mon<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2:Tus<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3:Wen<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4:Thu<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>5:Fri<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>6:Sat<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>while</code> 调用方式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- while</span><br><span class="line">- var day = 1</span><br><span class="line">ul</span><br><span class="line">    while day &lt; 7</span><br><span class="line">        li= day++</span><br></pre></td></tr></table></figure>

<h2 id="Minix"><a href="#Minix" class="headerlink" title="Minix"></a>Minix</h2><p><code>mixin</code> 名曰混入，类似其它编程语言中的函数，也是为了代码复用，可带参数或不带参数，定义方式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mixin menu-item(href, name)</span><br><span class="line">    li</span><br><span class="line">        span.dot ●</span><br><span class="line">        a(href=href)= name</span><br></pre></td></tr></table></figure>
<p>其中，<code>menu-item</code> 为调用时所用名称，可认为是函数名，<code>href</code> 及 <code>name</code> 是参数。同上定义变量所说，<code>a(href=href)= name</code> 中第二个 <code>=</code> 是为了将后面的 <code>name</code> 当作参数来处理，而不是当作字符串 <code>&quot;name&quot;</code> 来处理。</p>
<p>调用 <code>mixin</code> 定义的代码块，需通过 <code>+</code> 号紧跟 <code>mixin</code> 名称及参数:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+menu-item(&#x27;/Archives&#x27;,&#x27;Archives&#x27;)</span><br><span class="line">+menu-item(&#x27;/About&#x27;,&#x27;About&#x27;)</span><br></pre></td></tr></table></figure>
<p><code>mixin</code> 之所以称为混入，是因为其语法不局限于函数调用，在 <code>mixin</code> 可以使用块 <code>block</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mixin print(post)</span><br><span class="line">    if block</span><br><span class="line">        block</span><br><span class="line">    else</span><br><span class="line">        p= post</span><br><span class="line"></span><br><span class="line">+print(&quot;no block&quot;)</span><br><span class="line">+print(&quot;&quot;)</span><br><span class="line">    div.box</span><br><span class="line">        p this is the content of block</span><br></pre></td></tr></table></figure>
<p>对应 html 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>no block<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>this is the content of block<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><blockquote>
<p>注意以下 <code>pug</code> 语句中第一行的 <code>.</code> 号。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script(type=&#x27;text/javascript&#x27;).</span><br><span class="line">    var data = &quot;Test&quot;</span><br><span class="line">    var enable = true</span><br><span class="line">    if enable</span><br><span class="line">        console.log(data)</span><br><span class="line">    else</span><br><span class="line">        console.log(&#x27;nothing&#x27;)</span><br></pre></td></tr></table></figure>

<p>对应的 JS 代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="string">&quot;Test&quot;</span></span><br><span class="line">    <span class="keyword">var</span> enable = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> enable</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;nothing&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>对于简单脚本，使用 pug 尚可，复杂的还是单独写到 <code>.js</code> 文件中，然后通过 pug 引用方便一些，引用方式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script(type=&#x27;text/javascript&#x27;, src=&#x27;/path/to/js&#x27;)</span><br><span class="line"></span><br><span class="line">//- with hexo function url_for</span><br><span class="line">script(type=&#x27;text/javascript&#x27;, src=url_for(theme.js) + &#x27;/ready.js&#x27;)</span><br></pre></td></tr></table></figure>
<h1 id="hexo-相关"><a href="#hexo-相关" class="headerlink" title="hexo 相关"></a>hexo 相关</h1><p>在 hexo 主题中使用 pug 时，可以通过使用 hexo 提供的全局变量 <code>config</code> ， <code>theme</code> 来分别调用博客根目录下 <code>_config.yml</code> 文件中的参数以及主题根目录下 <code>_config.yml</code> 文件中的参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- blog config</span><br><span class="line">p= config.description</span><br><span class="line"></span><br><span class="line">//- theme config</span><br><span class="line">p= theme.title</span><br></pre></td></tr></table></figure>
<p>当然，pug 中可以直接使用 hexo 提供的其它全局变量及辅助函数，使用方法详见 hexo 的文档。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- head.pug</span><br><span class="line">head</span><br><span class="line">    meta(http-equiv=&#x27;content-type&#x27;, content=&#x27;text/html; charset=utf-8&#x27;)</span><br><span class="line">    meta(content=&#x27;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&#x27;, name=&#x27;viewport&#x27;)</span><br><span class="line">    meta(content=&#x27;yes&#x27;, name=&#x27;apple-mobile-web-app-capable&#x27;)</span><br><span class="line">    meta(content=&#x27;black-translucent&#x27;, name=&#x27;apple-mobile-web-app-status-bar-style&#x27;)</span><br><span class="line">    meta(content=&#x27;telephone=no&#x27;, name=&#x27;format-detection&#x27;)</span><br><span class="line">    meta(name=&#x27;description&#x27;, content=config.description)</span><br><span class="line">    block title</span><br><span class="line">    link(rel=&#x27;stylesheet&#x27;, type=&#x27;text/css&#x27;, href=url_for(theme.css) + &#x27;/style.css&#x27; + &#x27;?v=&#x27; + theme.version)</span><br><span class="line">    link(rel=&#x27;Shortcut Icon&#x27;, type=&#x27;image/x-icon&#x27;, href=url_for(&#x27;favicon.png&#x27;))</span><br><span class="line">    script(type=&#x27;text/javascript&#x27;, src=&#x27;//cdn.bootcss.com/jquery/3.3.1/jquery.min.js&#x27;)</span><br><span class="line">    block more</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- base.pug</span><br><span class="line">doctype html</span><br><span class="line">html(lang=&#x27;en&#x27;)</span><br><span class="line">    include _partial/head.pug</span><br><span class="line">    block more</span><br><span class="line">        link(rel=&#x27;stylesheet&#x27;, type=&#x27;text/css&#x27;, href=url_for(theme.plugins) + &#x27;/prettify/doxy.css&#x27;)</span><br><span class="line">        script(type=&#x27;text/javascript&#x27;, src=url_for(theme.js) + &#x27;/ready.js&#x27; + &#x27;?v=&#x27; + theme.version, async)</span><br><span class="line">    </span><br><span class="line">    //- body</span><br><span class="line">    body: #container.box</span><br><span class="line">        .h-wrapper</span><br><span class="line">            include _partial/nav-menu.pug</span><br><span class="line">        // article content</span><br><span class="line">        block content</span><br><span class="line"></span><br><span class="line">        include _partial/footer.pug</span><br></pre></td></tr></table></figure>
<p>其中:</p>
<ul>
<li><code>theme.*</code> 为主题配置文件 <code>_config.yml</code> 中的参数</li>
<li><code>url_for</code> 为 hexo 提供的用于查找资源路径的函数</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>pug 提供了 <code>包含</code> ，<code>继承</code> ，<code>Mixin</code> 等多种方式用于代码复用，语法简洁易懂，除了初学时需花费一些时间学习各种标点符号的含义外，其它倒也没有太大困难。</p>
<p>当然啦，pug 还有许多其它特性，但就我目前使用情况而言，以上这些便已足够。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://pugjs.org/zh-cn/api/getting-started.html">pugjs.org</a></li>
<li><a href="https://hexo.io/zh-cn/docs/">hexo.io&#x2F;zh-cn&#x2F;docs&#x2F;</a></li>
</ol>
<h2 id="原文出处"><a href="#原文出处" class="headerlink" title="原文出处"></a>原文出处</h2><ul>
<li>作者：litreily</li>
<li>链接：<a href="https://juejin.cn/post/6844903668383236104">https://juejin.cn/post/6844903668383236104</a></li>
<li>来源：掘金</li>
<li>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>学编程</category>
      </categories>
      <tags>
        <tag>博客建站</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown高级语法</title>
    <url>/markdown-advance-syntax.html</url>
    <content><![CDATA[<p>只有少数编辑器支持，或者需要安装相应的扩展渲染，使用前请先预览确认。</p>
<span id="more"></span>

<h1 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Term 1</span><br><span class="line">Term 2</span><br><span class="line">:   Definition A</span><br><span class="line">:   Definition B</span><br></pre></td></tr></table></figure>

<p>会被编译成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">&lt;dd&gt;Term 1&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;Term 2&lt;/dd&gt;</span><br><span class="line">&lt;dt&gt;Definition A&lt;dt&gt;</span><br><span class="line">&lt;dt&gt;Definition A&lt;dt&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure>

<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>通过<code>[TOC]</code>标记来插入目录。</p>
<p>在编辑器不支持<code>[TOC]</code>标记的情况下可以使用添加id的方法构建目录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Directory</span><br><span class="line">* [1.Content one](#chapter1)</span><br><span class="line">* [2.Content two](#chapter2)</span><br><span class="line"></span><br><span class="line">## &lt;span id=&quot;chapter1&quot;&gt;1.Content one&lt;/span&gt;</span><br><span class="line">## &lt;span id=&quot;chapter2&quot;&gt;2.Content two&lt;/span&gt;</span><br></pre></td></tr></table></figure>


<h1 id="TeX公式"><a href="#TeX公式" class="headerlink" title="TeX公式"></a>TeX公式</h1><p>内联的TeX公式使用一个美元符号标记。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</span><br></pre></td></tr></table></figure>

<p>会被编译成<br>内联（行内）公式：$\Gamma(n) &#x3D; (n-1)!\quad\forall n\in\mathbb N$</p>
<p>TeX公式块用独占一行的两个美元符号来标记。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$\left \lbrace \sum_&#123;i=0&#125;^n i^3 = \frac&#123;(n^2+n)(n+6)&#125;&#123;9&#125; \right \rbrace$$</span><br></pre></td></tr></table></figure>

<p>会被编译成</p>
<p>$$\left \lbrace \sum_{i&#x3D;0}^n i^3 &#x3D; \frac{(n^2+n)(n+6)}{9} \right \rbrace$$</p>
<p>如果你的编辑器不支持这个功能，可以手动解决。首先引入mathjax脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>之后，在需要插入公式的地方使用 <code>&lt;script&gt;</code> 标签包裹公式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;math/tex&quot;&gt;\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;math/tex; mode=display&quot;&gt;</span><br><span class="line">\Gamma(z) = \int_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt\,.</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>以上公式展示效果，在实际显示过程中，根据网络加载速度不同会有不同的解析展示速度，TeX的语法参考请见<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">这里</a>。</p>
<h1 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h1><p>语法为在代码块开始行后面加入语法声明，如 ```mermaid ，然后可以像这样来画uml时序图：</p>
<pre class="mermaid">sequenceDiagram
  Alice->>Bob: Hello Bob,how are you?
  Note right of Bob: Bob thinks
  Bob-->>Alice: I am fine thanks! and U?
  Note left of Alice: SB</pre>

<p>其MarkDown代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\`\`\`mermaid</span><br><span class="line">sequenceDiagram</span><br><span class="line">  Alice-&gt;&gt;Bob: Hello Bob,how are you?</span><br><span class="line">  Note right of Bob: Bob thinks</span><br><span class="line">  Bob--&gt;&gt;Alice: I am fine thanks! and U?</span><br><span class="line">  Note left of Alice: SB</span><br><span class="line">\`\`\` #代码块标识会被解析，实际上写代码块时不用添加转义符“\”</span><br></pre></td></tr></table></figure>

<p>时序图的语法请见 <a href="https://mermaidjs.github.io/sequenceDiagram.html">这里</a> 或 <a href="http://bramp.github.io/js-sequence-diagrams/">这里</a>。</p>
<p>uml流程图：</p>
<pre class="mermaid">  graph LR;
    A-->B & C-->D;</pre>

<p>其实现代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\`\`\`mermaid</span><br><span class="line">graph LR;</span><br><span class="line">  A--&gt;B &amp; C--&gt;D;</span><br><span class="line">\`\`\`</span><br></pre></td></tr></table></figure>

<p>流程图的语法请见 <a href="https://mermaidjs.github.io/flowchart.html">这里</a>， 更复杂点的flowchart可以看 <a href="http://adrai.github.io/flowchart.js/">这里</a> 。</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol>
<li><a href="/how-to-draw-flowchart-with-markdown.html">MarkDown文档中如何画出流程图</a></li>
<li><a href="https://github.com/wizardforcel/markdown-simple-world">https://github.com/wizardforcel/markdown-simple-world</a></li>
<li><a href="http://stevenshi.me/2017/06/26/hexo-insert-formula/">http://stevenshi.me/2017/06/26/hexo-insert-formula/</a></li>
<li><a href="https://blog.csdn.net/u013282174/article/details/80666123">https://blog.csdn.net/u013282174/article/details/80666123</a></li>
<li><a href="https://www.liuyude.com/How_to_make_your_HEXO_blog_support_handwriting_flowchart.html">https://www.liuyude.com/How_to_make_your_HEXO_blog_support_handwriting_flowchart.html</a></li>
<li><a href="https://mermaidjs.github.io/">https://mermaidjs.github.io/</a></li>
</ol>
<script type="text/javascript" async
  src="https://unpkg.com/mermaid@9.1.1/dist/mermaid.min.js">
</script>
]]></content>
      <categories>
        <category>学编程</category>
      </categories>
      <tags>
        <tag>混技能</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>从零开始建个小站 - 教程导航</title>
    <url>/guide-how-to-build-site-0.html</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>互联网时代，大家都想在浩瀚的网络世界留下点印记。</p>
<p>虽然有微信朋友圈，QQ空间，微博等可以记录点点滴滴，但他们要么是没法扩大圈子，要么是加以各种限制，到头来这些数据产权还都属于马家，更不用谈某天实现增值获取收益，寄人篱下终究不如自己做主：建个自己掌控的网站！</p>
<p>本教程旨在试图引导小白从零开始，免费或者低成本建个自己的小站。</p>
<p><img src="https://cdn.jsdelivr.net/gh/828767/static/images/hugo-hexo.png"></p>
<h2 id="教程目录"><a href="#教程目录" class="headerlink" title="教程目录"></a>教程目录</h2><ol>
<li><a href="/guide-how-to-build-site-1.html" title="从零开始建个小站 - 前置知识">从零开始建个小站 - 前置知识</a></li>
<li><a href="/guide-how-to-build-site-2.html" title="从零开始建个小站 - 建站方案选择">从零开始建个小站 - 建站方案选择</a></li>
<li><a href="/guide-how-to-build-site-3.html" title="从零开始建个小站 - 本地Git配置">从零开始建个小站 - 本地Git配置</a></li>
<li><a href="/guide-how-to-build-site-4.html" title="从零开始建个小站 - GitHub设置">从零开始建个小站 - GitHub设置</a></li>
<li><a href="/guide-how-to-build-site-5.html" title="从零开始建个小站 - 配置SSH密钥">从零开始建个小站 - 配置SSH密钥</a></li>
<li><a href="/guide-how-to-build-site-6.html" title="从零开始建个小站 - 实操：准备存储仓库">从零开始建个小站 - 实操：准备存储仓库</a></li>
<li><a href="/guide-how-to-build-site-7.html" title="从零开始建个小站 - 实操：打通发布流程">从零开始建个小站 - 实操：打通发布流程</a></li>
<li><a href="/guide-how-to-build-site-8.html" title="从零开始建个小站 - 实操：代码拉到本地">从零开始建个小站 - 实操：代码拉到本地</a></li>
<li><a href="/guide-how-to-build-site-9.html" title="从零开始建个小站 - 实操：本地测试预览">从零开始建个小站 - 实操：本地测试预览</a></li>
<li><a href="/guide-how-to-build-site-10.html" title="从零开始建个小站 - 实操：个性设置">从零开始建个小站 - 实操：个性设置</a></li>
<li><a href="/guide-how-to-build-site-11.html" title="从零开始建个小站 - 实操：内容增&#x2F;删&#x2F;改">从零开始建个小站 - 实操：内容增&#x2F;删&#x2F;改</a></li>
<li><a href="/guide-how-to-build-site-12.html" title="从零开始建个小站 - 常见问题">从零开始建个小站 - 常见问题</a></li>
</ol>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 前置知识</title>
    <url>/guide-how-to-build-site-1.html</url>
    <content><![CDATA[<h2 id="建站须知"><a href="#建站须知" class="headerlink" title="建站须知"></a>建站须知</h2><ol>
<li>虽然说是零基础建站，但一些互联网及计算机基本知识技能还是不能少的，如怎么安装软件，怎么敲命令，怎么解析域名……</li>
<li>建站就需要文件托管服务，如上传到GitHub仓库，自己买的云服务器，虚拟主机等</li>
<li>网站对外需要有IP或者域名（一般都不会直接IP对外服务），所以要么用GitHub提供免费的二级域名，要么自行购买域名并解析到文件托管服务器</li>
<li>建站时会涉及各种配置设置，而且各程序，各主题都不尽相同，都需要根据实际对象依照文档进行配置，所以需要具备阅读文档的能力</li>
</ol>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><table>
<thead>
<tr>
<th>名词</th>
<th>解释说明</th>
</tr>
</thead>
<tbody><tr>
<td>git</td>
<td>大名鼎鼎的分布式版本管理工具，每个版本改了什么一目了然</td>
</tr>
<tr>
<td>GitHub</td>
<td>版本管理托管商，全球最大的男性交友社区</td>
</tr>
<tr>
<td>action</td>
<td>GitHub提供的在线执行环境，类似于一个虚拟机</td>
</tr>
<tr>
<td>pages</td>
<td>GitHub提供的网页托管访问服务，每用户一个免费二级域名</td>
</tr>
<tr>
<td>npm</td>
<td>依赖包管理工具，各种套娃</td>
</tr>
<tr>
<td>MarkDown</td>
<td>轻量标记语言，写文档必备技能</td>
</tr>
<tr>
<td>服务器&#x2F;云主机</td>
<td>存放文件24小时在线提供网络访问服务的计算机</td>
</tr>
<tr>
<td>域名</td>
<td>互联网上便于人类识别记忆的访问地址</td>
</tr>
<tr>
<td>ICP备案</td>
<td>大陆境内服务器需要，有问题方便FBI请喝茶或上门送温暖</td>
</tr>
<tr>
<td>主题&#x2F;模板</td>
<td>套用后实展现相应的界面外观及功能</td>
</tr>
</tbody></table>
<h2 id="网站程序选型"><a href="#网站程序选型" class="headerlink" title="网站程序选型"></a>网站程序选型</h2><p>网站程序选型主要依据环境依赖程度和维护难度，以及网络上免费资源可持续性考虑，对大多数普通用户，建议：</p>
<ul>
<li>首选 <code>hugo/hexo</code>：HTML静态页渲染框架，速度快，可免费托管到GitHub仓库，MarkDown文档维护，主题多可满足大部分需求。<strong>大部分用户建议选择 hugo 程序</strong>，无需安装麻烦的依赖，而且有将近400套各式主题可选。</li>
<li>其次 <code>WordPress</code>：需自备服务器，没有免费资源可用，但有后台界面，网络上用户多，插件多，文档教程多</li>
</ul>
<p>市面上网站程序比较多，罗列了几个比较主流的框架，更多可以自行通过搜索引擎查找对应文档。</p>
<table>
<thead>
<tr>
<th>程序框架</th>
<th>环境依赖</th>
<th>维护难度</th>
<th>推荐度</th>
<th>常见用途</th>
</tr>
</thead>
<tbody><tr>
<td>hugo</td>
<td>&#x2F;</td>
<td>★</td>
<td>★★★★★</td>
<td>个人网站，企业官网，在线文档，求职简历</td>
</tr>
<tr>
<td>hexo</td>
<td>nodejs</td>
<td>★★</td>
<td>★★★★☆</td>
<td>个人网站，企业官网，在线文档，求职简历</td>
</tr>
<tr>
<td>gitbook</td>
<td>nodejs</td>
<td>★★★</td>
<td>★★</td>
<td>在线文档</td>
</tr>
<tr>
<td>vuepress</td>
<td>nodejs</td>
<td>★★</td>
<td>★★★</td>
<td>个人网站，在线文档</td>
</tr>
<tr>
<td>docsy</td>
<td>nodejs</td>
<td>★★★</td>
<td>★★★</td>
<td>在线文档</td>
</tr>
<tr>
<td>WordPress</td>
<td>MySQL，PHP</td>
<td>★★</td>
<td>★★★★</td>
<td>个人网站，企业官网</td>
</tr>
<tr>
<td>Typecho</td>
<td>MySQL，PHP</td>
<td>★★☆</td>
<td>★★★☆</td>
<td>个人网站，企业官网</td>
</tr>
<tr>
<td>Zblog</td>
<td>MySQL&#x2F;SQLite，PHP</td>
<td>★★</td>
<td>★★★</td>
<td>个人网站，企业官网</td>
</tr>
</tbody></table>
<blockquote>
<p>PS：维护难度和推荐度都是主观意见，推荐度高主要是基于部署简单，可选主题多，互联网免费资源多，对最终实现的功能需求未做考虑，大部分情况根据自己实际需求考量。</p>
</blockquote>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 实操：个性设置</title>
    <url>/guide-how-to-build-site-10.html</url>
    <content><![CDATA[<p>项目仓库克隆下来，网站的各项设置都是默认的，一些标题，作者之类的需要根据自己的实际情况进行修改，个性设置主要是网站根目录的框架配置和主题配置。好在 <code>hugo</code> 和 <code>hexo</code> 配置结构大同小异，而且都支持将配置文件放在网站根目录下，只需要修改配置，今后主题更新只需要同步配置其他也互不影响。</p>
<blockquote>
<p><strong>每套用一个主题，渲染出来的网站界面和功能都有所不同，所以除了基础配置，各个主题设计的配置项都可能不一样，所以一定要依照主题模板文档去配置！！！</strong></p>
</blockquote>
<blockquote>
<p><strong>一定要依照主题模板文档去配置！！！</strong></p>
</blockquote>
<blockquote>
<p><strong>一定要依照主题模板文档去配置！！！</strong></p>
</blockquote>
<h2 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a>Hugo</h2><p>Hugo只有一个配置文件，默认的配置功能非常少，只包含网站标题，主页地址和语言，其他功能都依赖主题模板实现。</p>
<p>主题到 <a href="https://themes.gohugo.io/" title="Hugo官方主题展示页">官网主题页</a> 去选自己喜欢的，然后依照主题文档去操作，这就是前面要强调三遍的<strong>依照主题文档去配置！</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/828767/static/images/hugo-themes.png" alt="Hugo官网主题页"></p>
<p><strong>以 <code>Ananke</code> 主题为例：</strong></p>
<ol>
<li><p>在 <a href="https://themes.gohugo.io/" title="Hugo官方主题展示页">官网主题页</a> 点击 <code>Ananke</code> 主题预览图或标题后，会被导航到主题说明页：<a href="https://themes.gohugo.io/themes/gohugo-theme-ananke/">https://themes.gohugo.io/themes/gohugo-theme-ananke/</a></p>
</li>
<li><p>该页面有主题预览及功能说明等，当然也包括该主题怎么安装，怎么配置，以下也就是搬运主题文档演示一遍</p>
</li>
<li><p>按文档说明安装该主题:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke</span><br><span class="line"># 作为子模块安装到themes/ananke，后期项目仓库部署时会从主题仓库更新</span><br></pre></td></tr></table></figure></li>
<li><p>配置 <code>config.toml</code>，以下仅是演示，详细规则可参阅 <a href="https://gohugo.io/getting-started/configuration/" title="Hugo官方配置说明">Hugo官方配置说明</a></p>
<p> 在主题目录下有个 <code>exampleSite</code> 文件夹，相当于就是一个完整的站点演示了，直接把该目录下的 <code>config.toml</code> 复制替换到项目仓库根目录下，或者复制里面的内容移到已有的 <code>config.toml</code> 里也是一样的，最后配置出来是这样的：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title = &quot;网站标题&quot;</span><br><span class="line">baseURL = &quot;https://yiwangmeng.cn&quot;</span><br><span class="line">uglyurls = true # true or false, &#x27;Pretty URLs&#x27; VS &#x27;Ugly URLs&#x27;: https://gohugo.io/content-management/urls/#pretty-urls</span><br><span class="line">languageCode = &quot;zh-cn&quot; # &quot;en-us&quot; default</span><br><span class="line">theme = &quot;ananke&quot;  # 指定主题</span><br><span class="line">resourceDir = &quot;../resources&quot;</span><br><span class="line"></span><br><span class="line">DefaultContentLanguage = &quot;zh&quot; # 默认展示语言，和[languages]配置对应</span><br><span class="line">SectionPagesMenu = &quot;main&quot;</span><br><span class="line">Paginate = 9 # this is set low for demonstrating with dummy content. Set to a higher number</span><br><span class="line">googleAnalytics = &quot;</span><br><span class="line">enableRobotsTXT = true</span><br><span class="line"></span><br><span class="line">[languages]</span><br><span class="line">  [languages.zh]</span><br><span class="line">    title = &quot;Ananke&quot;</span><br><span class="line">    weight = 1</span><br><span class="line">    contentDir = &quot;content/zh&quot; # 该语言内容存贮目录</span><br><span class="line">    # languageDirection = &#x27;rtl&#x27; for Right-To-Left languages</span><br><span class="line">  [languages.en]</span><br><span class="line">    title = &quot;Ananke English&quot;</span><br><span class="line">    weight = 2</span><br><span class="line">    contentDir = &quot;content/en&quot;</span><br><span class="line"></span><br><span class="line">[sitemap]</span><br><span class="line">  changefreq = &quot;monthly&quot;</span><br><span class="line">  priority = 0.5</span><br><span class="line">  filename = &quot;sitemap.xml&quot;</span><br><span class="line"></span><br><span class="line">[params]</span><br><span class="line">  text_color = &quot;&quot;</span><br><span class="line">  author = &quot;&quot;</span><br><span class="line">  favicon = &quot;&quot;</span><br><span class="line">  site_logo = &quot;&quot;</span><br><span class="line">  description = &quot;The last theme you&#x27;ll ever need. Maybe.&quot;</span><br><span class="line">  # choose a background color from any on this page: http://tachyons.io/docs/themes/skins/ and preface it with &quot;bg-&quot;</span><br><span class="line">  background_color_class = &quot;bg-purple&quot;</span><br><span class="line">  recent_posts_number = 3</span><br><span class="line"></span><br><span class="line">[[params.ananke_socials]]</span><br><span class="line">name = &quot;twitter&quot;</span><br><span class="line">url = &quot;https://twitter.com/GoHugoIO&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>填充内容</p>
<p> 直接把主题 <code>exampleSite</code> 的 <code>static</code> 和 <code>content</code> 拷贝到项目网站根目录，然后启动本地环境预览下： <code>hugo server</code> ，除了自己修改过的个性化信息，其他跟主题演示没区别，然后依葫芦画瓢修改或者新增自己要的内容就可以了，关键还是要依照主题文档操作！</p>
</li>
</ol>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>和Hugo一样，Hexo内容个性化也是靠配置文件完成，展示个性化根据主题而定。Hexo主题可以到 <a href="https://hexo.io/themes/" title="Hexo官方主题展示页">官网主题页</a> 去挑选：</p>
<p><img src="https://cdn.jsdelivr.net/gh/828767/static/images/hexo-themes.png" alt="Hexo官网主题页"></p>
<p>配置文件包含根目录下的 <code>_config.yml</code> 和主题目录下的 <code>_config.yml</code> ，在新版中这俩配置可以合而为一，也可以将主题目录下的 <code>_config.yml</code> 移到根目录下命名为： <code>_config.主题名称.yml</code> ，如  <code>_config.maupassant.yml</code> 表示主题 <code>maupassant</code> 的配置，详见 <a href="https://hexo.io/zh-cn/docs/configuration#%E4%BD%BF%E7%94%A8%E4%BB%A3%E6%9B%BF%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" title="使用代替主题配置文件">Hexo主题配置说明</a>。</p>
<p>配置优先级为：项目网站根目录下的 <code>_config.yml</code> 》 <code>_config.maupassant.yml</code> 》主题目录下的 <code>_config.yml</code> ，<strong>建议使用 <code>_config.主题名称.yml</code> 方式存储主题配置</strong>。</p>
<p>Hexo和Hugo一样，基础配置较少，剩下的<strong>请参照主题文档配置！请参照主题文档配置！请参照主题文档配置！</strong></p>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 实操：内容增/删/改</title>
    <url>/guide-how-to-build-site-11.html</url>
    <content><![CDATA[<ul>
<li>增：新增文章、页面、图片等</li>
<li>删：删除文章、页面、图片等</li>
<li>改：对已有的文章、页面等进行修改</li>
</ul>
<p><strong>所有的增删改都需要提交到线上仓库才能看到改变</strong>。使用本站提供的项目仓库，提交源代码后，会自动触发渲染发布，然后静态上端网络缓存更新后才能看到最新结果。</p>
<h3 id="注意格式"><a href="#注意格式" class="headerlink" title="注意格式"></a>注意格式</h3><p>不管是Hugo还是Hexo，他们都只是一种渲染框架，所以MarkDown源代码都需要特定的 <code>Front-matter</code> 标记，也就是两行 <code>---</code> 中间的那段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#x27;网页模板 pug 基本语法&#x27;</span><br><span class="line">categories:</span><br><span class="line">  - 学编程</span><br><span class="line">tags:</span><br><span class="line">  - 博客建站</span><br><span class="line">date: 2021-12-10 15:22:57</span><br><span class="line">updated: 2021-12-10 15:22:51</span><br><span class="line">toc: true</span><br><span class="line">comments: true</span><br><span class="line">keywords: &#x27;&#x27;</span><br><span class="line">description: &#x27;pug原名jade，因版权问题更名为pug，即哈巴狗。与hexo默认模块ejs一样，pug也是一个模板引擎，可用于快速的网站开发，当然也可以用于静态博客网站的设计。本站点现时所用主题manupassant也使用了pug。&#x27;</span><br><span class="line">top:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>以上 <code>Front-matter</code> 是 Hexo 程序的，其中设置项也需要对应的主题支持，如果不是 Hexo 基础 <code>Front-matter</code> ，具体需要添加什么根据主题文档来。</p>
<p><code>Front-matter</code> 基础配置项可见：</p>
<ol>
<li><a href="https://gohugo.io/content-management/front-matter/" title="Front Matter Formats">Hugo-Front-Matter</a></li>
<li><a href="https://hexo.io/zh-cn/docs/front-matter">Hexo-Front-matter</a></li>
</ol>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 常见问题</title>
    <url>/guide-how-to-build-site-12.html</url>
    <content><![CDATA[<ol>
<li><p><strong>发的文档看不懂&#x2F;不想看&#x2F;太麻烦……我不会怎么办？</strong><br>懒那就没辙了，发动你的钞能力！</p>
 <div style="float:left;border:solid 1px 000;margin:2px;"><img src="https://cdn.jsdelivr.net/gh/828767/static/images/QR-atm.png"  width="200" height="260" ></div>

 <div style="float:left;border:solid 1px 000;margin:2px;"><img src="https://cdn.jsdelivr.net/gh/828767/static/images/QR-Taobao.png" width="200" height="260" ></div>

 <div style="float:left;border:solid 1px 000;margin:2px;"><img src="https://cdn.jsdelivr.net/gh/828767/static/images/QR-QQ-260489333.png" width="200" height="260" ></div>
 <div style="float:none;clear:both;"></div></li>
<li><p><strong>GitHub咋打不开？</strong><br> 各地网络管制松紧度不一样，无法访问就上梯子吧。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 建站方案选择</title>
    <url>/guide-how-to-build-site-2.html</url>
    <content><![CDATA[<p>既然这是篇小白零基础建站教程，那么就不会涉及带门槛的方案，只是简单罗列了适合新手的案例，其他同等方案或者更复杂方案等熟悉了可以再自行研究。</p>
<h2 id="方案对比"><a href="#方案对比" class="headerlink" title="方案对比"></a>方案对比</h2><ol>
<li>免费：<strong>hugo&#x2F;hexo + GitHub + GitHub免费二级域名&#x2F;自备域名</strong><pre class="mermaid">    flowchart LR;
   本地维护MarkDown内容 -- hugo/hexo渲染 -->本地效果预览
   GitHub私有仓库 -- 绑定自备域名 --> 公开pages服务
   本地维护MarkDown内容 <-- git同步 --> GitHub私有仓库 -- 触发action自动渲染 --> 公开pages服务</pre>
<ul>
<li>优点：有免费资源，静态页速度快，网站源文件通过git版本管理安全可靠</li>
<li>缺点：需要点MarkDown语法知识，缺界面化管理后台</li>
</ul>
</li>
<li>付费：<strong>WordPress&#x2F;Typecho&#x2F;Zblog + 自备服务器 + 自备域名</strong><pre class="mermaid">    flowchart LR;
   自备域名 -- DNS解析 --> 自备服务器 --> 网站对外服务
   网站界面后台维护内容 --> 自备服务器 -- 大陆区服务器 --> ICP备案 --> 网站对外服务</pre>
<ul>
<li>优点：功能强大几乎能满足所有需求，装好后带后台，纯界面操作</li>
<li>缺点：需要自己购买服务器和域名，度对服务器要求高，响应速度相对慢点</li>
</ul>
</li>
</ol>
<h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><pre class="mermaid">flowchart TB;
免费方案 --必须--> 注册GitHub账号 & 安装Git客户端
注册GitHub账号 --> 创建仓库 & 配置访问令牌
安装Git客户端 --编辑MarkDown源码--> 发布到GitHub
免费方案 --可选--> 安装本地环境 & 装个趁手的编辑器 & 购买域名
装个趁手的编辑器</pre>
<ul>
<li><strong>免费方案</strong>：<ol>
<li><strong>GitHub账号</strong>：要使用免费的资源，不得注册个账号绑定才能找得到么？虽然国内Gitee也有，但绑定自己的域名要收费，而且内容要审核，所以还是直接用GitHub吧。当然，你有自己服务器和域名也可以用来替代。</li>
<li><strong>Git客户端</strong>：用来同步管理源代码，改了什么一目了然</li>
<li><strong>MarkDown 编辑器</strong>：纯手工敲代码是不可能的，借助编辑器事半功倍，而且还能和Git结合，大大降低难度</li>
<li><strong>域名「可选」</strong>：花点小钱占个自己的域名赏心悦目，也好打响自己的品牌，万一哪天走了张<a href="/" title="微博在2010年耗资800万收购 weibo.com">伟波</a>的运呢？</li>
</ol>
</li>
</ul>
<pre class="mermaid">flowchart LR;
付费方案 --必须--> 购买域名 & 购买服务器
购买服务器 --大陆区服务器--> ICP备案
购买服务器 --> 安装环境并部署网站 & 后台发布内容</pre>
<ul>
<li><strong>付费方案</strong>：<ol>
<li><strong>域名</strong>：虽然也有免费的，但还是建议花钱买，每年几十元</li>
<li><strong>服务器&#x2F;云主机&#x2F;虚拟主机</strong>：需要带数据库，支持PHP及安装扩展</li>
<li><strong>ICP备案</strong>：如果用大陆区服务器，必须先工信部ICP备案后才可用，大约需耗时6周</li>
</ol>
</li>
</ul>
<script type="text/javascript" async
  src="https://cdn.staticfile.org/mermaid/9.1.1/mermaid.min.js">
</script>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 本地Git配置</title>
    <url>/guide-how-to-build-site-3.html</url>
    <content><![CDATA[<p>如果你选择的是自备服务器的付费方案，那么直接在服务器上安装环境部署网站程序即可，本文不做详细演示，下文只针对免费方案进行详细说明。</p>
<h2 id="本地-Git-设置"><a href="#本地-Git-设置" class="headerlink" title="本地 Git 设置"></a>本地 Git 设置</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>到 <a href="https://git-scm.com/downloads">Git官网</a> 下载自己操作系统对应的安装包或者按对应命令安装即可。</p>
<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a><strong>Windows</strong></h4><p>安装的时候一路选默认 <code>next</code> 到底就行，最后会在文件夹右键菜单中出现 <code>Git Bash Here</code> 方便使用。</p>
<p><img src="https://cdn.jsdelivr.net/gh/828767/static/images/git_menu_gitbashhere.png" alt="Git右键菜单"></p>
<h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a><strong>macOS</strong></h4><p>Install <a href="https://brew.sh/">homebrew</a> if you don’t already have it, then:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>

<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a><strong>Linux</strong></h4><p><strong>Debian&#x2F;Ubuntu</strong><br>For the latest stable version for your release of Debian&#x2F;Ubuntu</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install git</span><br></pre></td></tr></table></figure>

<p><strong>CentOS&#x2F;Fedora</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure>

<h3 id="配置Git用户信息"><a href="#配置Git用户信息" class="headerlink" title="配置Git用户信息"></a>配置Git用户信息</h3><p>如前一步图示，随便在哪个文件夹里：点 <code>右键</code> 菜单》点击 <code>Git Bash Here</code> 》启动 <code>Git Bash</code> 「macOS&#x2F;Linux系统打开 <code>Terminal（终端）</code>」，复制粘贴如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置Git用户信息</span><br><span class="line">git config --global user.name &quot;Your_Name&quot;</span><br><span class="line">git config --global user.email &quot;Your_Email&quot;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：请将命令中邮箱及用户名替换为自己实际信息</p>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - GitHub设置</title>
    <url>/guide-how-to-build-site-4.html</url>
    <content><![CDATA[<h2 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a>注册GitHub账号</h2><p>如果已有账号则跳过此步骤，直接登录设置即可。如果还没有账号，请访问 <a href="https://github.com/">https://github.com</a> ，完成注册和邮箱认证，一般用户选择免费套餐就足够用了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/828767/static/images/github.com_join_recommended_plan.png" alt="免费套餐额度"></p>
<h2 id="生成-Personal-access-token"><a href="#生成-Personal-access-token" class="headerlink" title="生成 Personal access token"></a>生成 <code>Personal access token</code></h2><p>取消了用户密码认证后，<code>PAT</code>「<code>Personal access token</code>」成了 GitHub 官方默认的HTTPS认证方式，比SSH密钥安全性差点，但配置简单点。</p>
<ol>
<li><p>登录后，在任何页面的右上角，单击右上角个人资料照片，然后单击 <code>Settings（设置）</code></p>
</li>
<li><p>在左侧栏中，单击  <code>&lt;&gt;开发者设置</code>》<code>Personal access tokens（个人访问令牌）</code></p>
<p> <img src="https://docs.github.com/assets/cb-7169/images/help/settings/personal_access_tokens_tab.png" alt="Personal access tokens"></p>
</li>
<li><p>单击 <code>Generate new token（生成新令牌）</code>，如需密码验证输密码验证即可。</p>
<p> <code>Note</code> 行里随便填，写给自己看的，过期时间建议选择 <code>No Expiration（永不过期）</code></p>
<p> <img src="https://cdn.jsdelivr.net/gh/828767/static/images/personal_access_token.png" alt="Generate new token"></p>
 <div style="padding: 15px; border: 1px solid transparent; border-color: transparent; margin-bottom: 20px; border-radius: 4px; color: #8a6d3b;; background-color: #fcf8e3; border-color: #faebcc;">作为安全防范措施，GitHub 会自动删除一年内未使用的个人访问令牌。 </div>
</li>
<li><p>如下勾选相关权限</p>
<p> <img src="https://cdn.jsdelivr.net/gh/828767/static/images/personal_access_token_scopes.png" alt="repo"><br> <img src="https://cdn.jsdelivr.net/gh/828767/static/images/personal_access_token_scopes1.png" alt="admin/user"></p>
</li>
<li><p>最后点击 <code>Generate token</code> 生成个人访问令牌。</p>
<p> <img src="https://docs.github.com/assets/cb-10912/images/help/settings/generate_token.png" alt="Generate token"></p>
</li>
</ol>
<p>添加完成后，会显示刚添加的令牌，该令牌明文只会显示一次，所以请 <font color=red>务必复制保存下来备用</font>否则就需要删除重新生成，后面项目仓库和本地访问认证都能用得到该令牌。</p>
<p><img src="https://cdn.jsdelivr.net/gh/828767/static/images/personal_access_tokens.png" alt="令牌明文内容"></p>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 配置SSH密钥</title>
    <url>/guide-how-to-build-site-5.html</url>
    <content><![CDATA[<p>相对于前文提到的 <a href="/guide-how-to-build-site-4.html" title="从零开始建个小站 - GitHub设置">GitHub设置 - Personal access token</a>，使用 SSH 密钥是另一种更安全的方式。</p>
<h2 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h2><div style="padding: 15px; border: 1px solid transparent; border-color: transparent; margin-bottom: 20px; border-radius: 4px; color: #8a6d3b;; background-color: #fcf8e3; border-color: #faebcc;">
<strong>注意：</strong> 
<p>2021年8月14号开始，GitHub弃用账密验证Git操作，改用token或SSH密钥</p>
<p>GitHub 在 2022 年 3 月 15 日通过删除较旧的不安全密钥类型提高了安全性，不再支持 DSA 密钥 (<code>ssh-dss</code>)。</p>
<p>在 2021 年 11 月 2 日之前 <code>valid_after</code> 的 RSA 密钥 (<code>ssh-rsa</code>) 可以继续使用任何签名算法。 在该日期之后生成的 RSA 密钥必须使用 SHA-2 签名算法。 某些较旧的客户端可能需要升级才能使用 SHA-2 签名。</p></div>

<p>当前就相当于强制用户使用超长随机串密码，安全加强是好事，遵循规则使用 <code>SHA-2</code> 签名规则密钥即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 生成密钥对，一路回车默认即可</span><br><span class="line"># 如已有其他密钥对在用，自己改下生成的文件名以防覆盖</span><br><span class="line">ssh-keygen -t ed25519 -C &quot;Your_Email&quot;</span><br></pre></td></tr></table></figure>

<p>如果您使用的是不支持 <code>ed25519</code> 算法的旧系统，请使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;Your_Email&quot;</span><br></pre></td></tr></table></figure>
<p>更多密钥相关详细信息可参阅 [GitHub官方文档][new-SSH-key]</p>
<p>如果你是一路回车生成密钥对，那么生成的密钥对会保存在：<code>~/.ssh/</code> 目录下，<code>~</code> 表示用户目录，如操作系统登录用户名是 <code>xyz</code> ，那么在Windows下路径则为 <code>C:\Users\xyz\.ssh</code> ,macOS&#x2F;Linux下路径为 <code>/home/xyz/.ssh</code> ，其中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/.ssh/id_ed25519 //私钥，保存在本地</span><br><span class="line">~/.ssh/id_ed25519.pub //公钥，配置到异端</span><br></pre></td></tr></table></figure>

<p>到此，本地Git环境已准备妥当，下一步将公钥配置到GitHub中就能使用了。</p>
<h2 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h2><p>为了使用方便，给GitHub添加一个用户密钥，一个密钥可作用于整个账号的增删改查操作。</p>
<ol>
<li><p>将 SSH 公钥内容复制到剪贴板「假设都按前面的默认操作」</p>
 <details open><summary>Windows</summary>

<p> 打开 <code>Git Bash</code> ，复制粘贴如下命令</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_ed25519.pub</span><br><span class="line">//该命令自动将公钥存到剪贴板，直接用文本编辑器打开公钥再复制也是一样的</span><br></pre></td></tr></table></figure>

 </details>
 <details><summary>macOS/Linux</summary>

<p> 打开 Terminal（终端），复制粘贴如下命令：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_ed25519.pub</span><br><span class="line">// 执行完将打印出来的公钥内容完整复制待用</span><br></pre></td></tr></table></figure>

 </details>
</li>
<li><p>登录GitHub账号后，在任何页面的右上角，单击右上角个人资料照片，然后单击弹出下拉中的 <code>Settings（设置）</code></p>
</li>
<li><p>选择左侧 <code>Access</code>》 点击 <code>SSH and GPG keys</code>，点击 <code>New SSH key（新 SSH 密钥）</code></p>
<p> <img src="https://cdn.jsdelivr.net/gh/828767/static/images/github_set_access_new_ssh.png" alt="Add New SSH key"></p>
</li>
<li><p>在 <code>Title</code>（标题）字段中，为新密钥添加描述性标签便于识别用途。 例如，如果您使用在个人Mac上，此密钥名称可能是 <code>Personal MacBook</code>。</p>
</li>
<li><p>将前面复制的公钥串粘贴到 <code>Key</code>（密钥）字段</p>
<p> <img src="https://docs.github.com/assets/cb-24796/images/help/settings/ssh-key-paste.png" alt="粘贴公钥串"></p>
</li>
<li><p>最后点击 <code>Add SSH key（添加 SSH 密钥）</code> 完成添加</p>
</li>
</ol>
</details>]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 实操：准备存储仓库</title>
    <url>/guide-how-to-build-site-6.html</url>
    <content><![CDATA[<p>本实操仅针对 <a href="/guide-how-to-build-site-2.html" title="从零开始建个小站 - 建站方案选择">建站方案选择</a> 中提及的免费方案：<strong>hugo&#x2F;hexo + GitHub + GitHub免费二级域名&#x2F;自备域名</strong>，另外的付费方案自带网站后台，界面化的一体操作没什么好演示的，如有需要可求助我们的战略合作伙伴Google和百度。</p>
<h2 id="建立存储仓库"><a href="#建立存储仓库" class="headerlink" title="建立存储仓库"></a>建立存储仓库</h2><p>虽然可以通过分支控制源文件和对外访问文件，但还是建议分仓库存储：</p>
<ol>
<li><strong>公开：GitHubPages仓库</strong>：页面文件对外访问</li>
<li><strong>私有：项目仓库</strong>：存储网站源文件，只有自己可见防止提交记录、网站配置等机密信息外泄</li>
</ol>
<h3 id="公开：GitHubPages仓库"><a href="#公开：GitHubPages仓库" class="headerlink" title="公开：GitHubPages仓库"></a><strong>公开：GitHubPages仓库</strong></h3><ol>
<li><p>登录GitHub，在任何页面的右上角，使用 <code>+</code> 下拉菜单选择 <code>New repository（新建仓库）</code></p>
<p> <img src="https://docs.github.com/assets/cb-11427/images/help/repository/repo-create.png" alt="新建GitHubPages仓库"></p>
</li>
<li><p>因为要对外访问，所以名称必须为：<code>&lt;owner&gt;.github.io</code>，且可见性必须为 <code>public(公开)</code>：</p>
<p> <img src="https://docs.github.com/assets/cb-34195/images/help/pages/create-repository-name-pages.png" alt="username.github.io"><br> <img src="https://docs.github.com/assets/cb-20877/images/help/repository/create-repository-public-private.png" alt="可见性选public(公开)"></p>
</li>
<li><p>此时只是个空仓库备用，等有提交了再来设置pages</p>
</li>
</ol>
<h3 id="私有：项目仓库"><a href="#私有：项目仓库" class="headerlink" title="私有：项目仓库"></a><strong>私有：项目仓库</strong></h3><p>项目仓库保存着网站的源代码，控制网站的输出内容和页面样式。这里用导入模板仓库的方法，快速生成具有与模板仓库相同的目录结构和文件的新仓库，该模板仓库实现功能：</p>
<ul>
<li>自动将源文件渲染并发布到GitHubPages仓库pages分支</li>
<li>自动判断配置的网站域名，并决定是否需要绑定 <code>CNAME</code></li>
<li>自动渲染发布到当前项目仓库pages分支，如果不设置为私有仓库可作为项目主页访问</li>
<li>pages分支只保留最后1次提交记录</li>
</ul>
<ol>
<li><p>打开 <a href="https://github.com/828767/" title="hugo/hexo框架模板">这个模板仓库</a> 主页面，根据自己的需求选择 <code>action-hugo</code> 或者 <code>action-hexo</code> 等仓库任选其一</p>
</li>
<li><p>在文件列表上方，单击 <code>Use this template（使用此模板）</code></p>
<p> <img src="https://docs.github.com/assets/cb-36544/images/help/repository/use-this-template-button.png" alt="使用模板"></p>
</li>
<li><p>输入你想要的仓库名称和描述（可选），网站源码仓库可见性建议选择 <code>Private（私有）</code></p>
<p> <img src="https://docs.github.com/assets/cb-25139/images/help/repository/create-repository-name.png" alt="项目仓库名称"></p>
</li>
<li><p>（可选）要包括模板中所有分支的目录结构和文件，而不仅仅是默认分支，请勾选 <code>Include all branches（包括所有分支）</code></p>
</li>
<li><p>最后点击 <code>Create repository from template（从模板创建仓库）</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 实操：打通发布流程</title>
    <url>/guide-how-to-build-site-7.html</url>
    <content><![CDATA[<p>截止当前，我们已经准备好了建站需要的存储仓库，接着还需要配置相应的权限才能顺利对外发布。</p>
<h2 id="配置发布令牌"><a href="#配置发布令牌" class="headerlink" title="配置发布令牌"></a>配置发布令牌</h2><p>还记得 GitHub 设置中配置的 <code>Personal access token</code> 么，前面叮嘱复制保存下来，下面该派上用场了：</p>
<ol>
<li><p>导航到刚创建的项目仓库主页面，在仓库名称下，单击  <code>Settings（设置）</code></p>
<p> <img src="https://docs.github.com/assets/cb-21851/images/help/repository/repo-actions-settings.png" alt="Settings（设置）"></p>
</li>
<li><p>点击左侧的 <code>Secrets》Actions</code>，新建仓库机密</p>
<p> <img src="https://cdn.jsdelivr.net/gh/828767/static/images/repo_set_repo_secret.png" alt="新建仓库机密"></p>
</li>
<li><p>在 <code>Name（名称）</code>输入框中键入机密的名称必须为：<code>ACTION_ACCESS_TOKEN</code> ，<code>Value</code> 框粘贴之前复制保存的那串值</p>
<p> <img src="https://cdn.jsdelivr.net/gh/828767/static/images/repo_set_repo_secret1.png" alt="ADD ACTION_ACCESS_TOKEN"></p>
</li>
<li><p>最后单击 <code>Add secret（添加密码）</code> 保存完成</p>
<p> <img src="https://cdn.jsdelivr.net/gh/828767/static/images/repo_set_repo_secret2.png" alt="ACTION_ACCESS_TOKEN"></p>
</li>
</ol>
<h2 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h2><p>经过之前的一番操作，服务器上一切都准备就绪了，可以试试好使与否，直接在项目仓库中触发个提交就行，比如点击 <code>config.toml</code> 或 <code>config.yml</code> 编辑里面的url，然后保存提交。</p>
<p><img src="https://cdn.jsdelivr.net/gh/828767/static/images/github_commit_first.png" alt="提交变更试效果"></p>
<p>项目仓库提交变更后，要不了一分钟会自动将源文件渲染并发布到pages仓库，到pages仓库中可见刚从项目仓库提交过来的分支，要对外访问则要设置为pages指定分支。</p>
<p><img src="https://cdn.jsdelivr.net/gh/828767/static/images/github_repo_new_branch.png" alt="自动提交的分支"></p>
<h2 id="设置pages分支"><a href="#设置pages分支" class="headerlink" title="设置pages分支"></a>设置pages分支</h2><p>前文已经提到pages分支了，用户pages仓库为：<code>&lt;owner&gt;.github.io</code>，其他则为项目仓库，设置方法都是一样的：</p>
<ol>
<li><p>导航到pages仓库主页，点击 <code>Settings（设置）</code>，点击左侧 <code>Pages</code> 标签，选择对应的分支</p>
<p> <img src="https://cdn.jsdelivr.net/gh/828767/static/images/githubpages_select_branch.png" alt="Pages-branch"></p>
</li>
<li><p>点击保存后，大约5分钟，就可以通过页面上提示的地址对外访问了。</p>
<p> <img src="https://docs.github.com/assets/cb-27618/images/help/pages/click-pages-url-to-preview.png" alt="&lt;owner&gt;.github.io"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 实操：代码拉到本地</title>
    <url>/guide-how-to-build-site-8.html</url>
    <content><![CDATA[<p>工欲善其事必先利其器，Hexo&#x2F;Hugo虽然没后台，选用个好用的编辑器后甚至比WordPress之类的后台还方便。</p>
<h2 id="文档编辑器"><a href="#文档编辑器" class="headerlink" title="文档编辑器"></a>文档编辑器</h2><p>优秀的MarkDown编辑器不少，Typora、Atom、vscode等都是其中的佼佼者，推荐 <code>vscode</code>：</p>
<ul>
<li>微软主导开发，全平台开源免费</li>
<li>用户众多，各种功能插件一应俱全</li>
<li>支持目录树管理，所有文件操作都可以在一个界面内完成</li>
<li>支持分屏及实时预览</li>
<li>与Git终端集成，版本管理一目了然，支持 <code>pull</code> 与 <code>push</code> 等界面化操作</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/35271042/118224532-3842c400-b438-11eb-923d-a5f66fa6785a.png" alt="vscode"></p>
<p><strong>作为 MarkDown 编辑器，推荐安装以下扩展</strong></p>
<ol>
<li>Git History</li>
<li>GitLens supercharges</li>
<li>Markdown All in One</li>
<li>Markdown Preview Mermaid Support</li>
<li>Markdown Table</li>
<li>Markdown Shortcuts</li>
</ol>
<p>其他更多扩展根据自己需求去发觉安装，代码美化，自动填充，自动关闭标签等功能应有尽有。</p>
<h2 id="克隆仓库到本地"><a href="#克隆仓库到本地" class="headerlink" title="克隆仓库到本地"></a>克隆仓库到本地</h2><p>虽然项目仓库主页直接增删改文件都可以，但网页上只能一个一个文件操作，建议还是同步到本地使用，借助编辑器事半功倍，也相当于多了个源码本地备份。</p>
<p>前面已经准备好了 <code>vscode</code>，那么直接在 <code>vscode</code> 中操作。</p>
<ol>
<li><p>启动 <code>vscode</code> ，通过快捷 <code>CTRL+~</code> 或者菜单 <code>Terminal》New Terminal（新建终端）</code></p>
<p> <img src="https://cdn.jsdelivr.net/gh/828767/static/images/vscode_new_terminal.png" alt="新建终端"></p>
</li>
<li><p>在打开的终端中，通过 <code>git clone </code> 命令将项目仓库克隆到本地「也可以安装 <code>GitHub Explorer</code> 像下载工具一样界面化操作」</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看当前所处的目录，vscode打开文件夹后终端默认切到目录路径</span><br><span class="line">pwd</span><br><span class="line"># 为方便管理，切换到自己需要的目录，此示例是在D盘建了个git目录</span><br><span class="line">cd d:\git</span><br><span class="line"># 将仓库包括子项目保存到d:\git\REPOSITORY</span><br><span class="line">git clone --recurse-submodules https://github.com/USERNAME/REPOSITORY.git</span><br></pre></td></tr></table></figure>
<p> 请将仓库地址换成实际地址，获取方法：打开仓库主页》在文件列表右上方有个 <code>Code</code> ，点击下拉复制，如下图所示：</p>
<p> <img src="https://cdn.jsdelivr.net/gh/828767/static/images/github_clone_https_url.png" alt="获取项目仓库地址"></p>
</li>
<li><p>克隆完成后，通过快捷方式 <code>Ctrl+K Ctrl+O</code> 或者菜单 <code>File（文件）》Open Folder（打开文件夹）</code> 打开刚克隆完的仓库目录。</p>
<p> <img src="https://cdn.jsdelivr.net/gh/828767/static/images/vscode_markdown_editor.png" alt="打开文件夹"></p>
</li>
</ol>
<p>至此，我们就可以在 <code>vscode</code> 中便捷地增删改网站源文件了。</p>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始建个小站 - 实操：本地测试预览</title>
    <url>/guide-how-to-build-site-9.html</url>
    <content><![CDATA[<p>如果你想在本地就直接看到渲染后的效果，那么还需要安装个本地环境。</p>
<h2 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a>Hugo</h2><p>Hugo 是个golang开发的跨平台程序，无需外部依赖，直接将单程序安装部署在本地就行，此处以Windows操作系统为示例，其他操作系统请见 [Hugo官方安装说明][hogo-install]。</p>
<p>打开 <a href="https://github.com/gohugoio/hugo/releases">Hugo版本发布页</a>，下载 Windows 版本，建议下载 <a href="https://github.com/gohugoio/hugo/releases/download/v0.99.1/hugo_extended_0.99.1_Windows-64bit.zip">hugo_extended 版</a>，将程序 <code>hugo.exe</code> 解压到某目录，如 <code>C:\HUGO\</code> ，然后将此目录添加到系统变量中就可以在任何位置直接执行 <code>hugo</code> 命令，可直接打开命令终端使用 <code>set</code> 一键完成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将 C:\HUGO\ 添加到系统 path 变量，请替换成自己的实际路径</span><br><span class="line">set path=%path%;C:\HUGO\</span><br></pre></td></tr></table></figure>
<p>如果习惯界面设置，可以百度搜索：<code>Windows 添加path变量</code> ，设置完成后任意路径下执行命令可见效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hugo version</span><br><span class="line">hugo v0.99.1-d524067382e60ce2a2248c3133a1b3af206b6ef1+extended windows/amd64 BuildDate=2022-05-18T11:18:14Z VendorInfo=gohugoio</span><br></pre></td></tr></table></figure>

<p>切换到刚克隆下来的项目仓库「vscode打开文件夹后启动的终端会自动切到当前目录」，预览下网站效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx@CVE MINGW64 /d/git/action-hugo (main) //当前所在路径，Git分支</span><br><span class="line">$ hugo server //运行本地服务端</span><br><span class="line">Start building sites … </span><br><span class="line">hugo v0.99.1-d524067382e60ce2a2248c3133a1b3af206b6ef1+extended windows/amd64 BuildDate=2022-05-18T11:18:14Z VendorInfo=gohugoio</span><br><span class="line"></span><br><span class="line">                   | ZH | EN  </span><br><span class="line">-------------------+----+-----</span><br><span class="line">  Pages            | 20 | 19</span><br><span class="line">  Paginator pages  |  0 |  0</span><br><span class="line">  Non-page files   |  0 |  0</span><br><span class="line">  Static files     |  6 |  6</span><br><span class="line">  Processed images |  0 |  0</span><br><span class="line">  Aliases          |  2 |  1</span><br><span class="line">  Sitemaps         |  2 |  1</span><br><span class="line">  Cleaned          |  0 |  0</span><br><span class="line"></span><br><span class="line">Built in 352 ms</span><br><span class="line">Watching for changes in D:\git\action-hugo\&#123;archetypes,content,data,layouts,static,themes&#125;</span><br><span class="line">Watching for config changes in D:\git\action-hugo\config.toml, D:\git\action-hugo\themes\ananke\config.yaml</span><br><span class="line">Environment: &quot;development&quot;</span><br><span class="line">Serving pages from memory</span><br><span class="line">Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender</span><br><span class="line">Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)</span><br><span class="line">Press Ctrl+C to stop</span><br></pre></td></tr></table></figure>
<p>点击返回提示的url调用浏览器打开即能看到效果。</p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo 需要依赖 <code>npm</code> ，所以需要安装 <code>nodejs</code>，直接到 <a href="https://nodejs.org/">官网</a> 下载安装包一路默认安装，macOS及Linux按官网提示安装即可。安装完成 <code>npm version</code> 有相应提示。</p>
<p>因为要在本地运行查看效果，那么还需要安装 <code>hexo-cli</code> 和 <code>node_modules</code> 依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx@CVE MINGW64 /d/git/action-hexo (main) //当前所在路径，Git分支</span><br><span class="line">$ npm install -g hexo-cli //全局安装hexo客户端</span><br><span class="line">$ npm install //在hexo仓库根目录下执行，会自动安装预设的模块</span><br></pre></td></tr></table></figure>
<p>安装完成后，执行 <code>hexo version</code> 可以查看效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx@CVE MINGW64 /d/git/action-hexo (main) //当前所在路径，Git分支</span><br><span class="line">$ hexo s</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop. </span><br></pre></td></tr></table></figure>
<p>点击返回提示的url调用浏览器打开即能看到效果。</p>
]]></content>
      <categories>
        <category>做网站</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
