{"meta":{"title":"易网盟","subtitle":"一切都很美好","description":"","author":"易网盟","url":"https://zhangyingnaoliver.github.io","root":"/"},"pages":[{"title":"关于本站","date":"2022-11-22T06:37:57.818Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"about/index.html","permalink":"https://zhangyingnaoliver.github.io/about/index.html","excerpt":"","text":"这是个互联网爱好者个人小站，完全出于兴趣爱好自封互联网研究院院长，乐于分享计算机相关使用方法，推广优质实用软件。所有技术类文章除特别说明外均为本站原创，所提供的软件为院长原创或由网络整理而来。 本院始终坚信： 分享是种美德，好人一生平安！ 本着尊重国家法律的精神，根据中华人民共和国国务院令第632号规定： 第十七条 为了学习和研究软件内含的设计思想和原理，通过安装、显示、传输或者存储软件等方式使用软件的，可以不经软件著作权人许可，不向其支付报酬。 本站所有资源均为学习，交流使用，不得用于任何商业用途。使用的软件请下载后24小时内自行删除，若由于研究学习本站提供文件或链接下载的软件而带来损失，本站不负任何责任。 如果您发现本站侵害了您的版权，请联系院长并出示版权证明，院长将第一时间进行相关处理。 如果您也一样热爱互联网，喜欢捣鼓软件，欢迎评论留言或与院长联系。 QQ群：键盘侠 260489333，点此加群"},{"title":"archives","date":"2020-07-18T05:10:34.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"archives/index.html","permalink":"https://zhangyingnaoliver.github.io/archives/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-08-30T03:41:17.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"categories/index.html","permalink":"https://zhangyingnaoliver.github.io/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2020-08-30T14:45:09.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"contact/index.html","permalink":"https://zhangyingnaoliver.github.io/contact/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-08-30T14:40:51.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"friends/index.html","permalink":"https://zhangyingnaoliver.github.io/friends/index.html","excerpt":"","text":""},{"title":"","date":"2016-12-31T10:09:56.000Z","updated":"2016-12-31T10:09:56.000Z","comments":false,"path":"history/index.html","permalink":"https://zhangyingnaoliver.github.io/history/index.html","excerpt":"","text":""},{"title":"友链","date":"2022-05-28T03:09:14.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"link/index.html","permalink":"https://zhangyingnaoliver.github.io/link/index.html","excerpt":"","text":""},{"title":"","date":"2017-02-24T09:37:05.000Z","updated":"2017-02-24T09:37:05.000Z","comments":true,"path":"tags/index.html","permalink":"https://zhangyingnaoliver.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2022-11-22T06:37:57.818Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"hello-world.html","link":"","permalink":"https://zhangyingnaoliver.github.io/hello-world.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"从零开始建个小站 - 常见问题","slug":"guide-how-to-build-site-12","date":"2022-06-02T12:20:20.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"guide-how-to-build-site-12.html","link":"","permalink":"https://zhangyingnaoliver.github.io/guide-how-to-build-site-12.html","excerpt":"","text":"发的文档看不懂&#x2F;不想看&#x2F;太麻烦……我不会怎么办？懒那就没辙了，发动你的钞能力！ GitHub咋打不开？ 各地网络管制松紧度不一样，无法访问就上梯子吧。","categories":[{"name":"做网站","slug":"做网站","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://zhangyingnaoliver.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"从零开始建个小站 - 实操：内容增/删/改","slug":"guide-how-to-build-site-11","date":"2022-05-31T12:20:20.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"guide-how-to-build-site-11.html","link":"","permalink":"https://zhangyingnaoliver.github.io/guide-how-to-build-site-11.html","excerpt":"","text":"增：新增文章、页面、图片等 删：删除文章、页面、图片等 改：对已有的文章、页面等进行修改 所有的增删改都需要提交到线上仓库才能看到改变。使用本站提供的项目仓库，提交源代码后，会自动触发渲染发布，然后静态上端网络缓存更新后才能看到最新结果。 注意格式不管是Hugo还是Hexo，他们都只是一种渲染框架，所以MarkDown源代码都需要特定的 Front-matter 标记，也就是两行 --- 中间的那段。 1234567891011121314---title: &#x27;网页模板 pug 基本语法&#x27;categories: - 学编程tags: - 博客建站date: 2021-12-10 15:22:57updated: 2021-12-10 15:22:51toc: truecomments: truekeywords: &#x27;&#x27;description: &#x27;pug原名jade，因版权问题更名为pug，即哈巴狗。与hexo默认模块ejs一样，pug也是一个模板引擎，可用于快速的网站开发，当然也可以用于静态博客网站的设计。本站点现时所用主题manupassant也使用了pug。&#x27;top:--- 以上 Front-matter 是 Hexo 程序的，其中设置项也需要对应的主题支持，如果不是 Hexo 基础 Front-matter ，具体需要添加什么根据主题文档来。 Front-matter 基础配置项可见： Hugo-Front-Matter Hexo-Front-matter","categories":[{"name":"做网站","slug":"做网站","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://zhangyingnaoliver.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"从零开始建个小站 - 实操：个性设置","slug":"guide-how-to-build-site-10","date":"2022-05-30T12:20:20.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"guide-how-to-build-site-10.html","link":"","permalink":"https://zhangyingnaoliver.github.io/guide-how-to-build-site-10.html","excerpt":"","text":"项目仓库克隆下来，网站的各项设置都是默认的，一些标题，作者之类的需要根据自己的实际情况进行修改，个性设置主要是网站根目录的框架配置和主题配置。好在 hugo 和 hexo 配置结构大同小异，而且都支持将配置文件放在网站根目录下，只需要修改配置，今后主题更新只需要同步配置其他也互不影响。 每套用一个主题，渲染出来的网站界面和功能都有所不同，所以除了基础配置，各个主题设计的配置项都可能不一样，所以一定要依照主题模板文档去配置！！！ 一定要依照主题模板文档去配置！！！ 一定要依照主题模板文档去配置！！！ HugoHugo只有一个配置文件，默认的配置功能非常少，只包含网站标题，主页地址和语言，其他功能都依赖主题模板实现。 主题到 官网主题页 去选自己喜欢的，然后依照主题文档去操作，这就是前面要强调三遍的依照主题文档去配置！ 以 Ananke 主题为例： 在 官网主题页 点击 Ananke 主题预览图或标题后，会被导航到主题说明页：https://themes.gohugo.io/themes/gohugo-theme-ananke/ 该页面有主题预览及功能说明等，当然也包括该主题怎么安装，怎么配置，以下也就是搬运主题文档演示一遍 按文档说明安装该主题: 12git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke# 作为子模块安装到themes/ananke，后期项目仓库部署时会从主题仓库更新 配置 config.toml，以下仅是演示，详细规则可参阅 Hugo官方配置说明 在主题目录下有个 exampleSite 文件夹，相当于就是一个完整的站点演示了，直接把该目录下的 config.toml 复制替换到项目仓库根目录下，或者复制里面的内容移到已有的 config.toml 里也是一样的，最后配置出来是这样的： 123456789101112131415161718192021222324252627282930313233343536373839404142title = &quot;网站标题&quot;baseURL = &quot;https://yiwangmeng.cn&quot;uglyurls = true # true or false, &#x27;Pretty URLs&#x27; VS &#x27;Ugly URLs&#x27;: https://gohugo.io/content-management/urls/#pretty-urlslanguageCode = &quot;zh-cn&quot; # &quot;en-us&quot; defaulttheme = &quot;ananke&quot; # 指定主题resourceDir = &quot;../resources&quot;DefaultContentLanguage = &quot;zh&quot; # 默认展示语言，和[languages]配置对应SectionPagesMenu = &quot;main&quot;Paginate = 9 # this is set low for demonstrating with dummy content. Set to a higher numbergoogleAnalytics = &quot;enableRobotsTXT = true[languages] [languages.zh] title = &quot;Ananke&quot; weight = 1 contentDir = &quot;content/zh&quot; # 该语言内容存贮目录 # languageDirection = &#x27;rtl&#x27; for Right-To-Left languages [languages.en] title = &quot;Ananke English&quot; weight = 2 contentDir = &quot;content/en&quot;[sitemap] changefreq = &quot;monthly&quot; priority = 0.5 filename = &quot;sitemap.xml&quot;[params] text_color = &quot;&quot; author = &quot;&quot; favicon = &quot;&quot; site_logo = &quot;&quot; description = &quot;The last theme you&#x27;ll ever need. Maybe.&quot; # choose a background color from any on this page: http://tachyons.io/docs/themes/skins/ and preface it with &quot;bg-&quot; background_color_class = &quot;bg-purple&quot; recent_posts_number = 3[[params.ananke_socials]]name = &quot;twitter&quot;url = &quot;https://twitter.com/GoHugoIO&quot; 填充内容 直接把主题 exampleSite 的 static 和 content 拷贝到项目网站根目录，然后启动本地环境预览下： hugo server ，除了自己修改过的个性化信息，其他跟主题演示没区别，然后依葫芦画瓢修改或者新增自己要的内容就可以了，关键还是要依照主题文档操作！ Hexo和Hugo一样，Hexo内容个性化也是靠配置文件完成，展示个性化根据主题而定。Hexo主题可以到 官网主题页 去挑选： 配置文件包含根目录下的 _config.yml 和主题目录下的 _config.yml ，在新版中这俩配置可以合而为一，也可以将主题目录下的 _config.yml 移到根目录下命名为： _config.主题名称.yml ，如 _config.maupassant.yml 表示主题 maupassant 的配置，详见 Hexo主题配置说明。 配置优先级为：项目网站根目录下的 _config.yml 》 _config.maupassant.yml 》主题目录下的 _config.yml ，建议使用 _config.主题名称.yml 方式存储主题配置。 Hexo和Hugo一样，基础配置较少，剩下的请参照主题文档配置！请参照主题文档配置！请参照主题文档配置！","categories":[{"name":"做网站","slug":"做网站","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://zhangyingnaoliver.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"从零开始建个小站 - 实操：本地测试预览","slug":"guide-how-to-build-site-9","date":"2022-05-29T12:20:20.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"guide-how-to-build-site-9.html","link":"","permalink":"https://zhangyingnaoliver.github.io/guide-how-to-build-site-9.html","excerpt":"","text":"如果你想在本地就直接看到渲染后的效果，那么还需要安装个本地环境。 HugoHugo 是个golang开发的跨平台程序，无需外部依赖，直接将单程序安装部署在本地就行，此处以Windows操作系统为示例，其他操作系统请见 [Hugo官方安装说明][hogo-install]。 打开 Hugo版本发布页，下载 Windows 版本，建议下载 hugo_extended 版，将程序 hugo.exe 解压到某目录，如 C:\\HUGO\\ ，然后将此目录添加到系统变量中就可以在任何位置直接执行 hugo 命令，可直接打开命令终端使用 set 一键完成： 12# 将 C:\\HUGO\\ 添加到系统 path 变量，请替换成自己的实际路径set path=%path%;C:\\HUGO\\ 如果习惯界面设置，可以百度搜索：Windows 添加path变量 ，设置完成后任意路径下执行命令可见效果： 12$ hugo versionhugo v0.99.1-d524067382e60ce2a2248c3133a1b3af206b6ef1+extended windows/amd64 BuildDate=2022-05-18T11:18:14Z VendorInfo=gohugoio 切换到刚克隆下来的项目仓库「vscode打开文件夹后启动的终端会自动切到当前目录」，预览下网站效果： 123456789101112131415161718192021222324xxx@CVE MINGW64 /d/git/action-hugo (main) //当前所在路径，Git分支$ hugo server //运行本地服务端Start building sites … hugo v0.99.1-d524067382e60ce2a2248c3133a1b3af206b6ef1+extended windows/amd64 BuildDate=2022-05-18T11:18:14Z VendorInfo=gohugoio | ZH | EN -------------------+----+----- Pages | 20 | 19 Paginator pages | 0 | 0 Non-page files | 0 | 0 Static files | 6 | 6 Processed images | 0 | 0 Aliases | 2 | 1 Sitemaps | 2 | 1 Cleaned | 0 | 0Built in 352 msWatching for changes in D:\\git\\action-hugo\\&#123;archetypes,content,data,layouts,static,themes&#125;Watching for config changes in D:\\git\\action-hugo\\config.toml, D:\\git\\action-hugo\\themes\\ananke\\config.yamlEnvironment: &quot;development&quot;Serving pages from memoryRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRenderWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)Press Ctrl+C to stop 点击返回提示的url调用浏览器打开即能看到效果。 HexoHexo 需要依赖 npm ，所以需要安装 nodejs，直接到 官网 下载安装包一路默认安装，macOS及Linux按官网提示安装即可。安装完成 npm version 有相应提示。 因为要在本地运行查看效果，那么还需要安装 hexo-cli 和 node_modules 依赖： 123xxx@CVE MINGW64 /d/git/action-hexo (main) //当前所在路径，Git分支$ npm install -g hexo-cli //全局安装hexo客户端$ npm install //在hexo仓库根目录下执行，会自动安装预设的模块 安装完成后，执行 hexo version 可以查看效果： 12345xxx@CVE MINGW64 /d/git/action-hexo (main) //当前所在路径，Git分支$ hexo sINFO Validating configINFO Start processingINFO Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop. 点击返回提示的url调用浏览器打开即能看到效果。","categories":[{"name":"做网站","slug":"做网站","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://zhangyingnaoliver.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"从零开始建个小站 - 实操：代码拉到本地","slug":"guide-how-to-build-site-8","date":"2022-05-28T12:20:20.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"guide-how-to-build-site-8.html","link":"","permalink":"https://zhangyingnaoliver.github.io/guide-how-to-build-site-8.html","excerpt":"","text":"工欲善其事必先利其器，Hexo&#x2F;Hugo虽然没后台，选用个好用的编辑器后甚至比WordPress之类的后台还方便。 文档编辑器优秀的MarkDown编辑器不少，Typora、Atom、vscode等都是其中的佼佼者，推荐 vscode： 微软主导开发，全平台开源免费 用户众多，各种功能插件一应俱全 支持目录树管理，所有文件操作都可以在一个界面内完成 支持分屏及实时预览 与Git终端集成，版本管理一目了然，支持 pull 与 push 等界面化操作 作为 MarkDown 编辑器，推荐安装以下扩展 Git History GitLens supercharges Markdown All in One Markdown Preview Mermaid Support Markdown Table Markdown Shortcuts 其他更多扩展根据自己需求去发觉安装，代码美化，自动填充，自动关闭标签等功能应有尽有。 克隆仓库到本地虽然项目仓库主页直接增删改文件都可以，但网页上只能一个一个文件操作，建议还是同步到本地使用，借助编辑器事半功倍，也相当于多了个源码本地备份。 前面已经准备好了 vscode，那么直接在 vscode 中操作。 启动 vscode ，通过快捷 CTRL+~ 或者菜单 Terminal》New Terminal（新建终端） 在打开的终端中，通过 git clone 命令将项目仓库克隆到本地「也可以安装 GitHub Explorer 像下载工具一样界面化操作」 123456# 查看当前所处的目录，vscode打开文件夹后终端默认切到目录路径pwd# 为方便管理，切换到自己需要的目录，此示例是在D盘建了个git目录cd d:\\git# 将仓库包括子项目保存到d:\\git\\REPOSITORYgit clone --recurse-submodules https://github.com/USERNAME/REPOSITORY.git 请将仓库地址换成实际地址，获取方法：打开仓库主页》在文件列表右上方有个 Code ，点击下拉复制，如下图所示： 克隆完成后，通过快捷方式 Ctrl+K Ctrl+O 或者菜单 File（文件）》Open Folder（打开文件夹） 打开刚克隆完的仓库目录。 至此，我们就可以在 vscode 中便捷地增删改网站源文件了。","categories":[{"name":"做网站","slug":"做网站","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://zhangyingnaoliver.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"从零开始建个小站 - 实操：打通发布流程","slug":"guide-how-to-build-site-7","date":"2022-05-27T12:20:20.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"guide-how-to-build-site-7.html","link":"","permalink":"https://zhangyingnaoliver.github.io/guide-how-to-build-site-7.html","excerpt":"","text":"截止当前，我们已经准备好了建站需要的存储仓库，接着还需要配置相应的权限才能顺利对外发布。 配置发布令牌还记得 GitHub 设置中配置的 Personal access token 么，前面叮嘱复制保存下来，下面该派上用场了： 导航到刚创建的项目仓库主页面，在仓库名称下，单击 Settings（设置） 点击左侧的 Secrets》Actions，新建仓库机密 在 Name（名称）输入框中键入机密的名称必须为：ACTION_ACCESS_TOKEN ，Value 框粘贴之前复制保存的那串值 最后单击 Add secret（添加密码） 保存完成 小试牛刀经过之前的一番操作，服务器上一切都准备就绪了，可以试试好使与否，直接在项目仓库中触发个提交就行，比如点击 config.toml 或 config.yml 编辑里面的url，然后保存提交。 项目仓库提交变更后，要不了一分钟会自动将源文件渲染并发布到pages仓库，到pages仓库中可见刚从项目仓库提交过来的分支，要对外访问则要设置为pages指定分支。 设置pages分支前文已经提到pages分支了，用户pages仓库为：&lt;owner&gt;.github.io，其他则为项目仓库，设置方法都是一样的： 导航到pages仓库主页，点击 Settings（设置），点击左侧 Pages 标签，选择对应的分支 点击保存后，大约5分钟，就可以通过页面上提示的地址对外访问了。","categories":[{"name":"做网站","slug":"做网站","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://zhangyingnaoliver.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"从零开始建个小站 - 实操：准备存储仓库","slug":"guide-how-to-build-site-6","date":"2022-05-26T12:20:20.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"guide-how-to-build-site-6.html","link":"","permalink":"https://zhangyingnaoliver.github.io/guide-how-to-build-site-6.html","excerpt":"","text":"本实操仅针对 建站方案选择 中提及的免费方案：hugo&#x2F;hexo + GitHub + GitHub免费二级域名&#x2F;自备域名，另外的付费方案自带网站后台，界面化的一体操作没什么好演示的，如有需要可求助我们的战略合作伙伴Google和百度。 建立存储仓库虽然可以通过分支控制源文件和对外访问文件，但还是建议分仓库存储： 公开：GitHubPages仓库：页面文件对外访问 私有：项目仓库：存储网站源文件，只有自己可见防止提交记录、网站配置等机密信息外泄 公开：GitHubPages仓库 登录GitHub，在任何页面的右上角，使用 + 下拉菜单选择 New repository（新建仓库） 因为要对外访问，所以名称必须为：&lt;owner&gt;.github.io，且可见性必须为 public(公开)： 此时只是个空仓库备用，等有提交了再来设置pages 私有：项目仓库项目仓库保存着网站的源代码，控制网站的输出内容和页面样式。这里用导入模板仓库的方法，快速生成具有与模板仓库相同的目录结构和文件的新仓库，该模板仓库实现功能： 自动将源文件渲染并发布到GitHubPages仓库pages分支 自动判断配置的网站域名，并决定是否需要绑定 CNAME 自动渲染发布到当前项目仓库pages分支，如果不设置为私有仓库可作为项目主页访问 pages分支只保留最后1次提交记录 打开 这个模板仓库 主页面，根据自己的需求选择 action-hugo 或者 action-hexo 等仓库任选其一 在文件列表上方，单击 Use this template（使用此模板） 输入你想要的仓库名称和描述（可选），网站源码仓库可见性建议选择 Private（私有） （可选）要包括模板中所有分支的目录结构和文件，而不仅仅是默认分支，请勾选 Include all branches（包括所有分支） 最后点击 Create repository from template（从模板创建仓库）","categories":[{"name":"做网站","slug":"做网站","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://zhangyingnaoliver.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"从零开始建个小站 - 配置SSH密钥","slug":"guide-how-to-build-site-5","date":"2022-05-25T12:20:20.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"guide-how-to-build-site-5.html","link":"","permalink":"https://zhangyingnaoliver.github.io/guide-how-to-build-site-5.html","excerpt":"","text":"相对于前文提到的 GitHub设置 - Personal access token，使用 SSH 密钥是另一种更安全的方式。 生成SSH密钥 注意： 2021年8月14号开始，GitHub弃用账密验证Git操作，改用token或SSH密钥 GitHub 在 2022 年 3 月 15 日通过删除较旧的不安全密钥类型提高了安全性，不再支持 DSA 密钥 (ssh-dss)。 在 2021 年 11 月 2 日之前 valid_after 的 RSA 密钥 (ssh-rsa) 可以继续使用任何签名算法。 在该日期之后生成的 RSA 密钥必须使用 SHA-2 签名算法。 某些较旧的客户端可能需要升级才能使用 SHA-2 签名。 当前就相当于强制用户使用超长随机串密码，安全加强是好事，遵循规则使用 SHA-2 签名规则密钥即可： 123# 生成密钥对，一路回车默认即可# 如已有其他密钥对在用，自己改下生成的文件名以防覆盖ssh-keygen -t ed25519 -C &quot;Your_Email&quot; 如果您使用的是不支持 ed25519 算法的旧系统，请使用： 1ssh-keygen -t rsa -b 4096 -C &quot;Your_Email&quot; 更多密钥相关详细信息可参阅 [GitHub官方文档][new-SSH-key] 如果你是一路回车生成密钥对，那么生成的密钥对会保存在：~/.ssh/ 目录下，~ 表示用户目录，如操作系统登录用户名是 xyz ，那么在Windows下路径则为 C:\\Users\\xyz\\.ssh ,macOS&#x2F;Linux下路径为 /home/xyz/.ssh ，其中： 12~/.ssh/id_ed25519 //私钥，保存在本地~/.ssh/id_ed25519.pub //公钥，配置到异端 到此，本地Git环境已准备妥当，下一步将公钥配置到GitHub中就能使用了。 配置密钥为了使用方便，给GitHub添加一个用户密钥，一个密钥可作用于整个账号的增删改查操作。 将 SSH 公钥内容复制到剪贴板「假设都按前面的默认操作」 Windows 打开 Git Bash ，复制粘贴如下命令 12clip &lt; ~/.ssh/id_ed25519.pub//该命令自动将公钥存到剪贴板，直接用文本编辑器打开公钥再复制也是一样的 macOS/Linux 打开 Terminal（终端），复制粘贴如下命令： 12cat ~/.ssh/id_ed25519.pub// 执行完将打印出来的公钥内容完整复制待用 登录GitHub账号后，在任何页面的右上角，单击右上角个人资料照片，然后单击弹出下拉中的 Settings（设置） 选择左侧 Access》 点击 SSH and GPG keys，点击 New SSH key（新 SSH 密钥） 在 Title（标题）字段中，为新密钥添加描述性标签便于识别用途。 例如，如果您使用在个人Mac上，此密钥名称可能是 Personal MacBook。 将前面复制的公钥串粘贴到 Key（密钥）字段 最后点击 Add SSH key（添加 SSH 密钥） 完成添加","categories":[{"name":"做网站","slug":"做网站","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://zhangyingnaoliver.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"从零开始建个小站 - GitHub设置","slug":"guide-how-to-build-site-4","date":"2022-05-24T12:20:20.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"guide-how-to-build-site-4.html","link":"","permalink":"https://zhangyingnaoliver.github.io/guide-how-to-build-site-4.html","excerpt":"","text":"注册GitHub账号如果已有账号则跳过此步骤，直接登录设置即可。如果还没有账号，请访问 https://github.com ，完成注册和邮箱认证，一般用户选择免费套餐就足够用了： 生成 Personal access token取消了用户密码认证后，PAT「Personal access token」成了 GitHub 官方默认的HTTPS认证方式，比SSH密钥安全性差点，但配置简单点。 登录后，在任何页面的右上角，单击右上角个人资料照片，然后单击 Settings（设置） 在左侧栏中，单击 &lt;&gt;开发者设置》Personal access tokens（个人访问令牌） 单击 Generate new token（生成新令牌），如需密码验证输密码验证即可。 Note 行里随便填，写给自己看的，过期时间建议选择 No Expiration（永不过期） 作为安全防范措施，GitHub 会自动删除一年内未使用的个人访问令牌。 如下勾选相关权限 最后点击 Generate token 生成个人访问令牌。 添加完成后，会显示刚添加的令牌，该令牌明文只会显示一次，所以请 务必复制保存下来备用否则就需要删除重新生成，后面项目仓库和本地访问认证都能用得到该令牌。","categories":[{"name":"做网站","slug":"做网站","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://zhangyingnaoliver.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"从零开始建个小站 - 本地Git配置","slug":"guide-how-to-build-site-3","date":"2022-05-23T12:20:20.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"guide-how-to-build-site-3.html","link":"","permalink":"https://zhangyingnaoliver.github.io/guide-how-to-build-site-3.html","excerpt":"","text":"如果你选择的是自备服务器的付费方案，那么直接在服务器上安装环境部署网站程序即可，本文不做详细演示，下文只针对免费方案进行详细说明。 本地 Git 设置安装Git到 Git官网 下载自己操作系统对应的安装包或者按对应命令安装即可。 Windows安装的时候一路选默认 next 到底就行，最后会在文件夹右键菜单中出现 Git Bash Here 方便使用。 macOSInstall homebrew if you don’t already have it, then: 1brew install git LinuxDebian&#x2F;UbuntuFor the latest stable version for your release of Debian&#x2F;Ubuntu 1apt install git CentOS&#x2F;Fedora 1yum install git 配置Git用户信息如前一步图示，随便在哪个文件夹里：点 右键 菜单》点击 Git Bash Here 》启动 Git Bash 「macOS&#x2F;Linux系统打开 Terminal（终端）」，复制粘贴如下命令： 123# 设置Git用户信息git config --global user.name &quot;Your_Name&quot;git config --global user.email &quot;Your_Email&quot; 注意：请将命令中邮箱及用户名替换为自己实际信息","categories":[{"name":"做网站","slug":"做网站","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://zhangyingnaoliver.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"从零开始建个小站 - 建站方案选择","slug":"guide-how-to-build-site-2","date":"2022-05-22T12:20:20.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"guide-how-to-build-site-2.html","link":"","permalink":"https://zhangyingnaoliver.github.io/guide-how-to-build-site-2.html","excerpt":"","text":"既然这是篇小白零基础建站教程，那么就不会涉及带门槛的方案，只是简单罗列了适合新手的案例，其他同等方案或者更复杂方案等熟悉了可以再自行研究。 方案对比 免费：hugo&#x2F;hexo + GitHub + GitHub免费二级域名&#x2F;自备域名 flowchart LR; 本地维护MarkDown内容 -- hugo/hexo渲染 -->本地效果预览 GitHub私有仓库 -- 绑定自备域名 --> 公开pages服务 本地维护MarkDown内容 GitHub私有仓库 -- 触发action自动渲染 --> 公开pages服务 优点：有免费资源，静态页速度快，网站源文件通过git版本管理安全可靠 缺点：需要点MarkDown语法知识，缺界面化管理后台 付费：WordPress&#x2F;Typecho&#x2F;Zblog + 自备服务器 + 自备域名 flowchart LR; 自备域名 -- DNS解析 --> 自备服务器 --> 网站对外服务 网站界面后台维护内容 --> 自备服务器 -- 大陆区服务器 --> ICP备案 --> 网站对外服务 优点：功能强大几乎能满足所有需求，装好后带后台，纯界面操作 缺点：需要自己购买服务器和域名，度对服务器要求高，响应速度相对慢点 准备条件flowchart TB; 免费方案 --必须--> 注册GitHub账号 & 安装Git客户端 注册GitHub账号 --> 创建仓库 & 配置访问令牌 安装Git客户端 --编辑MarkDown源码--> 发布到GitHub 免费方案 --可选--> 安装本地环境 & 装个趁手的编辑器 & 购买域名 装个趁手的编辑器 免费方案： GitHub账号：要使用免费的资源，不得注册个账号绑定才能找得到么？虽然国内Gitee也有，但绑定自己的域名要收费，而且内容要审核，所以还是直接用GitHub吧。当然，你有自己服务器和域名也可以用来替代。 Git客户端：用来同步管理源代码，改了什么一目了然 MarkDown 编辑器：纯手工敲代码是不可能的，借助编辑器事半功倍，而且还能和Git结合，大大降低难度 域名「可选」：花点小钱占个自己的域名赏心悦目，也好打响自己的品牌，万一哪天走了张伟波的运呢？ flowchart LR; 付费方案 --必须--> 购买域名 & 购买服务器 购买服务器 --大陆区服务器--> ICP备案 购买服务器 --> 安装环境并部署网站 & 后台发布内容 付费方案： 域名：虽然也有免费的，但还是建议花钱买，每年几十元 服务器&#x2F;云主机&#x2F;虚拟主机：需要带数据库，支持PHP及安装扩展 ICP备案：如果用大陆区服务器，必须先工信部ICP备案后才可用，大约需耗时6周","categories":[{"name":"做网站","slug":"做网站","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://zhangyingnaoliver.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"从零开始建个小站 - 前置知识","slug":"guide-how-to-build-site-1","date":"2022-05-21T12:20:20.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"guide-how-to-build-site-1.html","link":"","permalink":"https://zhangyingnaoliver.github.io/guide-how-to-build-site-1.html","excerpt":"","text":"建站须知 虽然说是零基础建站，但一些互联网及计算机基本知识技能还是不能少的，如怎么安装软件，怎么敲命令，怎么解析域名…… 建站就需要文件托管服务，如上传到GitHub仓库，自己买的云服务器，虚拟主机等 网站对外需要有IP或者域名（一般都不会直接IP对外服务），所以要么用GitHub提供免费的二级域名，要么自行购买域名并解析到文件托管服务器 建站时会涉及各种配置设置，而且各程序，各主题都不尽相同，都需要根据实际对象依照文档进行配置，所以需要具备阅读文档的能力 基本概念 名词 解释说明 git 大名鼎鼎的分布式版本管理工具，每个版本改了什么一目了然 GitHub 版本管理托管商，全球最大的男性交友社区 action GitHub提供的在线执行环境，类似于一个虚拟机 pages GitHub提供的网页托管访问服务，每用户一个免费二级域名 npm 依赖包管理工具，各种套娃 MarkDown 轻量标记语言，写文档必备技能 服务器&#x2F;云主机 存放文件24小时在线提供网络访问服务的计算机 域名 互联网上便于人类识别记忆的访问地址 ICP备案 大陆境内服务器需要，有问题方便FBI请喝茶或上门送温暖 主题&#x2F;模板 套用后实展现相应的界面外观及功能 网站程序选型网站程序选型主要依据环境依赖程度和维护难度，以及网络上免费资源可持续性考虑，对大多数普通用户，建议： 首选 hugo/hexo：HTML静态页渲染框架，速度快，可免费托管到GitHub仓库，MarkDown文档维护，主题多可满足大部分需求。大部分用户建议选择 hugo 程序，无需安装麻烦的依赖，而且有将近400套各式主题可选。 其次 WordPress：需自备服务器，没有免费资源可用，但有后台界面，网络上用户多，插件多，文档教程多 市面上网站程序比较多，罗列了几个比较主流的框架，更多可以自行通过搜索引擎查找对应文档。 程序框架 环境依赖 维护难度 推荐度 常见用途 hugo &#x2F; ★ ★★★★★ 个人网站，企业官网，在线文档，求职简历 hexo nodejs ★★ ★★★★☆ 个人网站，企业官网，在线文档，求职简历 gitbook nodejs ★★★ ★★ 在线文档 vuepress nodejs ★★ ★★★ 个人网站，在线文档 docsy nodejs ★★★ ★★★ 在线文档 WordPress MySQL，PHP ★★ ★★★★ 个人网站，企业官网 Typecho MySQL，PHP ★★☆ ★★★☆ 个人网站，企业官网 Zblog MySQL&#x2F;SQLite，PHP ★★ ★★★ 个人网站，企业官网 PS：维护难度和推荐度都是主观意见，推荐度高主要是基于部署简单，可选主题多，互联网免费资源多，对最终实现的功能需求未做考虑，大部分情况根据自己实际需求考量。","categories":[{"name":"做网站","slug":"做网站","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://zhangyingnaoliver.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"从零开始建个小站 - 教程导航","slug":"guide-how-to-build-site-0","date":"2022-05-20T12:20:20.000Z","updated":"2022-11-22T06:37:57.818Z","comments":true,"path":"guide-how-to-build-site-0.html","link":"","permalink":"https://zhangyingnaoliver.github.io/guide-how-to-build-site-0.html","excerpt":"","text":"引言互联网时代，大家都想在浩瀚的网络世界留下点印记。 虽然有微信朋友圈，QQ空间，微博等可以记录点点滴滴，但他们要么是没法扩大圈子，要么是加以各种限制，到头来这些数据产权还都属于马家，更不用谈某天实现增值获取收益，寄人篱下终究不如自己做主：建个自己掌控的网站！ 本教程旨在试图引导小白从零开始，免费或者低成本建个自己的小站。 教程目录 从零开始建个小站 - 前置知识 从零开始建个小站 - 建站方案选择 从零开始建个小站 - 本地Git配置 从零开始建个小站 - GitHub设置 从零开始建个小站 - 配置SSH密钥 从零开始建个小站 - 实操：准备存储仓库 从零开始建个小站 - 实操：打通发布流程 从零开始建个小站 - 实操：代码拉到本地 从零开始建个小站 - 实操：本地测试预览 从零开始建个小站 - 实操：个性设置 从零开始建个小站 - 实操：内容增&#x2F;删&#x2F;改 从零开始建个小站 - 常见问题","categories":[{"name":"做网站","slug":"做网站","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://zhangyingnaoliver.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"Markdown高级语法","slug":"markdown-advance-syntax","date":"2022-05-08T09:04:21.000Z","updated":"2022-05-08T09:04:21.000Z","comments":true,"path":"markdown-advance-syntax.html","link":"","permalink":"https://zhangyingnaoliver.github.io/markdown-advance-syntax.html","excerpt":"只有少数编辑器支持，或者需要安装相应的扩展渲染，使用前请先预览确认。","text":"只有少数编辑器支持，或者需要安装相应的扩展渲染，使用前请先预览确认。 定义列表1234Term 1Term 2: Definition A: Definition B 会被编译成 123456&lt;dl&gt;&lt;dd&gt;Term 1&lt;/dd&gt;&lt;dd&gt;Term 2&lt;/dd&gt;&lt;dt&gt;Definition A&lt;dt&gt;&lt;dt&gt;Definition A&lt;dt&gt;&lt;/dl&gt; 目录通过[TOC]标记来插入目录。 在编辑器不支持[TOC]标记的情况下可以使用添加id的方法构建目录。 123456## Directory* [1.Content one](#chapter1)* [2.Content two](#chapter2)## &lt;span id=&quot;chapter1&quot;&gt;1.Content one&lt;/span&gt;## &lt;span id=&quot;chapter2&quot;&gt;2.Content two&lt;/span&gt; TeX公式内联的TeX公式使用一个美元符号标记。 1$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ 会被编译成内联（行内）公式：$\\Gamma(n) &#x3D; (n-1)!\\quad\\forall n\\in\\mathbb N$ TeX公式块用独占一行的两个美元符号来标记。 1$$\\left \\lbrace \\sum_&#123;i=0&#125;^n i^3 = \\frac&#123;(n^2+n)(n+6)&#125;&#123;9&#125; \\right \\rbrace$$ 会被编译成 $$\\left \\lbrace \\sum_{i&#x3D;0}^n i^3 &#x3D; \\frac{(n^2+n)(n+6)}{9} \\right \\rbrace$$ 如果你的编辑器不支持这个功能，可以手动解决。首先引入mathjax脚本： 1&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;&lt;/script&gt; 之后，在需要插入公式的地方使用 &lt;script&gt; 标签包裹公式： 12345&lt;script type=&quot;math/tex&quot;&gt;\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N&lt;/script&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;\\Gamma(z) = \\int_0^\\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt\\,.&lt;/script&gt; 以上公式展示效果，在实际显示过程中，根据网络加载速度不同会有不同的解析展示速度，TeX的语法参考请见这里。 UML图语法为在代码块开始行后面加入语法声明，如 ```mermaid ，然后可以像这样来画uml时序图： sequenceDiagram Alice->>Bob: Hello Bob,how are you? Note right of Bob: Bob thinks Bob-->>Alice: I am fine thanks! and U? Note left of Alice: SB 其MarkDown代码如下： 1234567\\`\\`\\`mermaidsequenceDiagram Alice-&gt;&gt;Bob: Hello Bob,how are you? Note right of Bob: Bob thinks Bob--&gt;&gt;Alice: I am fine thanks! and U? Note left of Alice: SB\\`\\`\\` #代码块标识会被解析，实际上写代码块时不用添加转义符“\\” 时序图的语法请见 这里 或 这里。 uml流程图： graph LR; A-->B & C-->D; 其实现代码如下： 1234\\`\\`\\`mermaidgraph LR; A--&gt;B &amp; C--&gt;D;\\`\\`\\` 流程图的语法请见 这里， 更复杂点的flowchart可以看 这里 。 参考文档 MarkDown文档中如何画出流程图 https://github.com/wizardforcel/markdown-simple-world http://stevenshi.me/2017/06/26/hexo-insert-formula/ https://blog.csdn.net/u013282174/article/details/80666123 https://www.liuyude.com/How_to_make_your_HEXO_blog_support_handwriting_flowchart.html https://mermaidjs.github.io/","categories":[{"name":"学编程","slug":"学编程","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%AD%A6%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"混技能","slug":"混技能","permalink":"https://zhangyingnaoliver.github.io/tags/%E6%B7%B7%E6%8A%80%E8%83%BD/"}]},{"title":"网页模板 pug 基本语法","slug":"hexo-pug-notes","date":"2021-12-10T07:22:57.000Z","updated":"2021-12-10T07:22:51.000Z","comments":true,"path":"hexo-pug-notes.html","link":"","permalink":"https://zhangyingnaoliver.github.io/hexo-pug-notes.html","excerpt":"","text":"前言pug 原名 jade ，因版权问题更名为 pug ，即哈巴狗。与 hexo 默认模块 ejs 一样，pug 也是一个模板引擎，可用于快速的网站开发，当然也可以用于静态博客网站的设计。本站点现时所用主题 manupassant 也使用了 pug 。 本文针对 Hexo 中使用 pug 的情况为例，说明其基本语法。 安装12345# common installnpm install pug# install for hexo blognpm install hexo-renderer-pug --save 语法pug 不同于 html ，前者不需要标签的开和闭，如 html 的 &lt;p&gt;Demo&lt;/p&gt; ，在 pug 使用 p Demo 即可。 缩进pug 对空格敏感，有点类似 python 对制表符tab敏感。pug 使用空格作为缩进符，当然用 soft tab 也可行。同一级标签需保证左对齐。 123div p Hello, world! p Hello, pug. 渲染结果如下： 1234&lt;div&gt; &lt;p&gt;Hellow, world!&lt;/p&gt; &lt;p&gt;Hello, pug.&lt;/p&gt;&lt;/div&gt; 注释pug 使用 //- 或 // 对代码进行注释，前者注释内容不出现在渲染后的 html 文件中，后者反之。 12//- html中不包含此行// html中会包含此行 属性pug 将标签属性存放于括号 () 内，多个属性之间以 逗号 或 空格 分隔。此外，对于标签的 id 和 class ，pug 使用 # 紧跟标签 id ,使用 . 紧跟标签 class ，可以同时设置多个 class 。 12h1#title Test titleimg#name.class1.class2(src=&quot;/test.png&quot; alt=&quot;test&quot;) 渲染结果如下： 12&lt;h1 id=&quot;title&quot;&gt;Test title&lt;/h1&gt;&lt;img id=&quot;name&quot; class=&quot;class1 class2&quot; src=&quot;/test.png&quot; alt=&quot;test&quot;&gt; 包含为了方便代码复用，pug 提供了 include 包含功能，以下代码会将 _partial 目录下的 head.pug 文件内容包含到当前调用的位置。有点 C&#x2F;C++ 中内联函数的意思。 123doctype htmlhtml(lang=&#x27;en&#x27;) include _partial/head.pug 继承下面是一个简单的 base 模板，通过 block 定义了页面头部 head 和内容 body 。块 block 有点类似 C&#x2F;C++ 的抽象函数，需要在继承者中完成定义，填充具体内容。 123456//- base.pughtml head block title body block content 以下文件使用 extends 继承以上模板，通过 block 覆盖或替换原有块 block 。当然，继承者也可以在原有基础上继续扩展。 123456789//- index.pugextends base.pugblock title title &quot;Test title&quot;block content h1 Hello world! block article 定义变量pug中通过 - var name = value 的形式定义变量 123456- var intData = 100- var boolData = false- var stringData = &#x27;Test&#x27;p.int= intDatap.bool= boolDatap.stringData= stringData 需注意的是，在引用变量时，需要在引用位置加上&#x3D;号，否则会默认将变量名当成普通字符串使用。 如果想要将变量与其它字符串常量或是变量连接在一起，就不能用等号了，而是应该用 #&#123;&#125; ，该符号会对大括号内的变量进行求值和转义，最终得到渲染输出的内容。 1234- var girl = &#x27;Lily&#x27;- var boy = &#x27;Jack&#x27;p #&#123;girl&#125; is so beautiful!p And #&#123;boy&#125; is handsome. 条件结构pug 的条件语句与其它语言类似，均是如下这般： 12345678- var A = &#123;value: &#x27;Test&#x27;&#125;- var B = trueif A.value p= A.valueelse if B p= Belse p nothing 迭代pug 中使用 each 和 while 实现循环迭代，each 可以返回当前所在项的索引值，默认从 0 开始计数。 12345678910//- eachol each item in [&#x27;Sun&#x27;, &#x27;Mon&#x27;, &#x27;Tus&#x27;, &#x27;Wen&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;] li= item//- get index of each- var week = [&#x27;Sun&#x27;, &#x27;Mon&#x27;, &#x27;Tus&#x27;, &#x27;Wen&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;]ol each item, index in week li= index + &#x27;:&#x27; + item 渲染成 html 后： 123456789101112131415161718&lt;ol&gt; &lt;li&gt;Sun&lt;/li&gt; &lt;li&gt;Mon&lt;/li&gt; &lt;li&gt;Tus&lt;/li&gt; &lt;li&gt;Wen&lt;/li&gt; &lt;li&gt;Thu&lt;/li&gt; &lt;li&gt;Fri&lt;/li&gt; &lt;li&gt;Sat&lt;/li&gt;&lt;/ol&gt;&lt;ol&gt; &lt;li&gt;0:Sun&lt;/li&gt; &lt;li&gt;1:Mon&lt;/li&gt; &lt;li&gt;2:Tus&lt;/li&gt; &lt;li&gt;3:Wen&lt;/li&gt; &lt;li&gt;4:Thu&lt;/li&gt; &lt;li&gt;5:Fri&lt;/li&gt; &lt;li&gt;6:Sat&lt;/li&gt;&lt;/ol&gt; while 调用方式如下： 12345//- while- var day = 1ul while day &lt; 7 li= day++ Minixmixin 名曰混入，类似其它编程语言中的函数，也是为了代码复用，可带参数或不带参数，定义方式如下： 1234mixin menu-item(href, name) li span.dot ● a(href=href)= name 其中，menu-item 为调用时所用名称，可认为是函数名，href 及 name 是参数。同上定义变量所说，a(href=href)= name 中第二个 = 是为了将后面的 name 当作参数来处理，而不是当作字符串 &quot;name&quot; 来处理。 调用 mixin 定义的代码块，需通过 + 号紧跟 mixin 名称及参数: 12+menu-item(&#x27;/Archives&#x27;,&#x27;Archives&#x27;)+menu-item(&#x27;/About&#x27;,&#x27;About&#x27;) mixin 之所以称为混入，是因为其语法不局限于函数调用，在 mixin 可以使用块 block 12345678910mixin print(post) if block block else p= post+print(&quot;no block&quot;)+print(&quot;&quot;) div.box p this is the content of block 对应 html 代码： 12&lt;p&gt;no block&lt;/p&gt;&lt;div class=&quot;box&quot;&gt;&lt;p&gt;this is the content of block&lt;/p&gt;&lt;/div&gt; JavaScript 注意以下 pug 语句中第一行的 . 号。 1234567script(type=&#x27;text/javascript&#x27;). var data = &quot;Test&quot; var enable = true if enable console.log(data) else console.log(&#x27;nothing&#x27;) 对应的 JS 代码如下： 12345678&lt;script type=&#x27;text/javascript&#x27;&gt; var data = &quot;Test&quot; var enable = true if enable console.log(data) else console.log(&#x27;nothing&#x27;)&lt;/script&gt; 对于简单脚本，使用 pug 尚可，复杂的还是单独写到 .js 文件中，然后通过 pug 引用方便一些，引用方式如下： 1234script(type=&#x27;text/javascript&#x27;, src=&#x27;/path/to/js&#x27;)//- with hexo function url_forscript(type=&#x27;text/javascript&#x27;, src=url_for(theme.js) + &#x27;/ready.js&#x27;) hexo 相关在 hexo 主题中使用 pug 时，可以通过使用 hexo 提供的全局变量 config ， theme 来分别调用博客根目录下 _config.yml 文件中的参数以及主题根目录下 _config.yml 文件中的参数。 12345//- blog configp= config.description//- theme configp= theme.title 当然，pug 中可以直接使用 hexo 提供的其它全局变量及辅助函数，使用方法详见 hexo 的文档。 示例12345678910111213//- head.pughead meta(http-equiv=&#x27;content-type&#x27;, content=&#x27;text/html; charset=utf-8&#x27;) meta(content=&#x27;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&#x27;, name=&#x27;viewport&#x27;) meta(content=&#x27;yes&#x27;, name=&#x27;apple-mobile-web-app-capable&#x27;) meta(content=&#x27;black-translucent&#x27;, name=&#x27;apple-mobile-web-app-status-bar-style&#x27;) meta(content=&#x27;telephone=no&#x27;, name=&#x27;format-detection&#x27;) meta(name=&#x27;description&#x27;, content=config.description) block title link(rel=&#x27;stylesheet&#x27;, type=&#x27;text/css&#x27;, href=url_for(theme.css) + &#x27;/style.css&#x27; + &#x27;?v=&#x27; + theme.version) link(rel=&#x27;Shortcut Icon&#x27;, type=&#x27;image/x-icon&#x27;, href=url_for(&#x27;favicon.png&#x27;)) script(type=&#x27;text/javascript&#x27;, src=&#x27;//cdn.bootcss.com/jquery/3.3.1/jquery.min.js&#x27;) block more 12345678910111213141516//- base.pugdoctype htmlhtml(lang=&#x27;en&#x27;) include _partial/head.pug block more link(rel=&#x27;stylesheet&#x27;, type=&#x27;text/css&#x27;, href=url_for(theme.plugins) + &#x27;/prettify/doxy.css&#x27;) script(type=&#x27;text/javascript&#x27;, src=url_for(theme.js) + &#x27;/ready.js&#x27; + &#x27;?v=&#x27; + theme.version, async) //- body body: #container.box .h-wrapper include _partial/nav-menu.pug // article content block content include _partial/footer.pug 其中: theme.* 为主题配置文件 _config.yml 中的参数 url_for 为 hexo 提供的用于查找资源路径的函数 总结pug 提供了 包含 ，继承 ，Mixin 等多种方式用于代码复用，语法简洁易懂，除了初学时需花费一些时间学习各种标点符号的含义外，其它倒也没有太大困难。 当然啦，pug 还有许多其它特性，但就我目前使用情况而言，以上这些便已足够。 参考 pugjs.org hexo.io&#x2F;zh-cn&#x2F;docs&#x2F; 原文出处 作者：litreily 链接：https://juejin.cn/post/6844903668383236104 来源：掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","categories":[{"name":"学编程","slug":"学编程","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%AD%A6%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"博客建站","slug":"博客建站","permalink":"https://zhangyingnaoliver.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"}]}],"categories":[{"name":"做网站","slug":"做网站","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"},{"name":"学编程","slug":"学编程","permalink":"https://zhangyingnaoliver.github.io/categories/%E5%AD%A6%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://zhangyingnaoliver.github.io/tags/%E6%95%99%E7%A8%8B/"},{"name":"混技能","slug":"混技能","permalink":"https://zhangyingnaoliver.github.io/tags/%E6%B7%B7%E6%8A%80%E8%83%BD/"},{"name":"博客建站","slug":"博客建站","permalink":"https://zhangyingnaoliver.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"}]}